{"version":3,"file":"sinister-compilled-webpack.css","mappings":";;;AAqIA,cCvGI,6CASA,kECqLM,qDCrMN,SFOA,sBGzBJ,CHkEU,gBAII,oDGnEd,CJ4IA,MK9IE,aCQE,WDHF,qBADA,oCDKF,CCIQ,QACI,kBDFZ,CCOM,aACI,kBDLV,CCIM,aACI,kBDFV,CCCM,mBACI,mBDCV,CJiKE,QACE,wBACA,YI/JJ,CJ8LA,MACE,yBAIA,UI3LF,C","sources":["webpack://@get-sinister/sass/./test-sin/scss/pages/_test-sin.scss","webpack://@get-sinister/sass/./test-sin/node_modules/@get-sinister/sass/sin-core/mixins/private/_flex-properties-beta.scss","webpack://@get-sinister/sass/./test-sin/node_modules/@get-sinister/sass/sin-core/grid/_flex-beta.scss","webpack://@get-sinister/sass/./test-sin/node_modules/@get-sinister/sass/sin-core/grid/_spacing-beta.scss","webpack://@get-sinister/sass/./test-sin/scss/custom.scss","webpack://@get-sinister/sass/./test-sin/node_modules/@get-sinister/sass/sin-core/experimental/_massonry.scss","webpack://@get-sinister/sass/./test-sin/node_modules/@get-sinister/sass/sin-core/mixins/private/_css-property-line.scss"],"sourcesContent":["@use '../sin' as *;\r\n\r\n.sin {\r\n  // @include spacing((m, x, unset), (xs, m, x, 2), (m, y, 4, 0.5), (md, m, y, 2, 0.2));\r\n\r\n  // $generic: (ai-c, jc-c, ac-c, fd-cl, (x, 6), (0 0 43%), (max-content));\r\n\r\n  $xs: (jc-c, ac-fs, ai-fe, fd-cl, w-w, (x, 3, 2), (0 0 40%), (auto));\r\n  $md: (md, jc-c, ac-fs, ai-fe, fd-cl, w-w, (x, 3, 2), (0 0 auto), (max-content));\r\n\r\n  // @include spacing((m, g, 1), (xs, m, t, 1), (md, p, b, 2, 21), (xl, g, x, 1), (xxl, g, l, 2, 0.4));\r\n\r\n  // @include spacing();\r\n\r\n  // @include flex($xs, $md);\r\n  // @include spacing();\r\n\r\n  // color: color(test-color);\r\n  // @include boxshadow();\r\n\r\n  // @debug fs();]\r\n\r\n  // @debug color();\r\n\r\n  // @debug contrast(test-color, test-color-2);\r\n  // @debug contrast(#ffa, test-color-2);\r\n\r\n  // box-shadow: box-shadow(4);\r\n\r\n  // @include iframe();\r\n\r\n  // @include spacing((xs, m, g, 2));\r\n}\r\n// Check the rest arguements, if they exist, render the css else, continue\r\n// @debug contains(getMap($align-items), $flex-properties-list);\r\n// @if contains(getMap($align-items), $flex-properties-list) {\r\n//   @debug 'contains';\r\n// } @else {\r\n//   @debug 'does not contain';\r\n// }\r\n\r\n// @debug help();\r\n\r\n// .utopia {\r\n//   background-color: rgba(purple, 0.8);\r\n//   color: white;\r\n//   max-width: max-content;\r\n//   @include spacing((p, g, 2), (m, x, auto));\r\n\r\n//   h1 {\r\n//     font-size: fs(xxxl);\r\n//   }\r\n//   h2 {\r\n//     font-size: fs(xxl);\r\n//   }\r\n//   h3 {\r\n//     font-size: fs(xl);\r\n//   }\r\n//   h4 {\r\n//     font-size: fs(lg);\r\n//   }\r\n//   h5 {\r\n//     font-size: fs(md);\r\n//   }\r\n//   h6 {\r\n//     font-size: fs(sm);\r\n//   }\r\n\r\n//   span {\r\n//     font-size: fs(sm);\r\n//   }\r\n//   p {\r\n//     font-size: fs(sm);\r\n//   }\r\n\r\n//   li {\r\n//     font-size: fs(sm);\r\n//   }\r\n\r\n//   a {\r\n//     font-size: fs(sm);\r\n//   }\r\n\r\n//   strong {\r\n//     font-size: fs(sm);\r\n//   }\r\n\r\n//   em {\r\n//     font-size: fs(sm);\r\n//   }\r\n\r\n//   small {\r\n//     font-size: fs(xxs);\r\n//   }\r\n\r\n//   blockquote {\r\n//     font-size: fs(sm);\r\n//   }\r\n\r\n//   q {\r\n//     font-size: fs(sm);\r\n//   }\r\n// }\r\n\r\n// .spacing {\r\n//   background-color: #535353;\r\n//   @include flex((w-w, jc-c, ai-c));\r\n\r\n//   @include spacing((g, g, xl2-xl3));\r\n// }\r\n\r\n// .spacing-item {\r\n//   flex: 0 0 20%;\r\n//   height: 100px;\r\n//   // background-color: purple;\r\n// }\r\n\r\n// .overlay {\r\n//   &-image {\r\n//     background-image: url('https://cdn.webshopapp.com/shops/278947/files/270704851/dagger-templers.jpg');\r\n//     background-size: cover;\r\n//     height: 40vh;\r\n//     @include flex((fd-r, jc-c, ac-c, ai-c));\r\n//     @include overlay();\r\n//   }\r\n\r\n//   &-content {\r\n//     backdrop-filter: blur(2px);\r\n//     background-color: rgba(white, 1);\r\n//     padding: 4rem;\r\n//   }\r\n// }\r\n\r\n.test-spacing {\r\n  // @include spacing-beta(debug, (g, g, 3.23rem, 1.2, '!i'), (xs, g, b, 3, 1.2, '!i'), (md, m, x, auto), (m, l, 2rem), (xs, m, g, 2, 2.1));\r\n\r\n  // @include spacing-beta((xs, p, b, 4.5rem, 1.242), (md, p, x, 124px));\r\n  @include flex-beta((jc-c, ai-c, (g, 3, 1.2), (0 0 300px)));\r\n  // @include flex-beta(debug, (fd-cl, jc-c, ai-c, ac-c, (g, 1, 2), (50%)), ('!i', xs, fd-r, w-w, jc-c, ai-c, ac-c, (g, 2, 1.2), (0 0 42%), as-str));\r\n\r\n  // @include flex-beta(((g, 1, 1.2), (0 0 43%), '!i', auto-gap, as-str));\r\n  // @include flex-beta((debug, ai-c));\r\n}\r\n\r\n.test {\r\n  // @include flex-beta((fd-cl, jc-c, ai-c, ac-c, as-str, (g, 1, 1.3), (94%)), (xs, fd-r, w-w, (g, 2), (0 0 50%), auto-gap), (md, jc-sb, '!i'));\r\n}\r\n\r\n.grid {\r\n  // // Source https://www.youtube.com/watch?v=xMsckmmd5Dw&ab_channel=WesBos\r\n  // display: grid;\r\n  // gap: 1rem;\r\n  // grid-template-columns: repeat(12, 1fr);\r\n  // grid-auto-flow: dense;\r\n  // margin: 0 auto;\r\n  // max-width: 1200px;\r\n  // &-item {\r\n  //   border: 1px solid grey;\r\n  //   background: rgba(orange, 0.76);\r\n  //   padding: 1rem;\r\n\r\n  //   grid-column: span 4;\r\n  //   // grid-column: span 2;\r\n  //   // &:nth-child(5n) {\r\n  //   //   background-color: cornflowerblue;\r\n  //   //   grid-column: span 6;\r\n  //   // }\r\n  //   // &:nth-child(8n) {\r\n  //   //   background-color: tomato;\r\n  //   //   grid-column: span 2;\r\n  //   // }\r\n  //   // &:nth-child(9n) {\r\n  //   //   background-color: greenyellow;\r\n  //   //   grid-column: span 3;\r\n  //   // }\r\n  //   &.large {\r\n  //     background-color: cornflowerblue;\r\n  //   }\r\n\r\n  //   &.larger {\r\n  //     background: tomato;\r\n  //     grid-column: span 8;\r\n  //     grid-column-end: -1;\r\n  //   }\r\n  // }\r\n\r\n  @include massonry();\r\n\r\n  > * {\r\n    background-color: orange;\r\n    padding: 2rem;\r\n  }\r\n}\r\n\r\n// .grid {\r\n//   padding: 1em;\r\n//   display: grid;\r\n//   grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\r\n//   grid-gap: 1em;\r\n\r\n//   &-item {\r\n//     border: 1px solid grey;\r\n//     background: rgba(orange, 0.76);\r\n//     padding: 1rem;\r\n\r\n//     &:nth-child(2) {\r\n//     }\r\n//   }\r\n// }\r\n\r\n// .test {\r\n//   @include spacing-beta((m, g, 1), (xs, m, g, 2), (md, p, y, 2, 1.4), (lg, m, x, auto), (xl, m, t, 2, '!i'));\r\n// }\r\n\r\n// .test {\r\n//   @include spacing-beta((xl, g, x, 1), (xs, g, t, 2, 1.2), (md, g, g, 3, '!i'));\r\n// }\r\n\r\n.test {\r\n  color: blue;\r\n}\r\n.test {\r\n  background-color: orangered;\r\n}\r\n\r\n.test {\r\n  color: blue;\r\n}\r\n","@use 'sass:list';\r\n@use 'sass:string';\r\n@use 'sass:map';\r\n@use 'sass:math';\r\n@use '../../functions/' as *;\r\n@use '../../misc/css-properties' as *;\r\n@use '../../grid/spacing-beta' as *;\r\n@use '../../../../../../sin.config' as *;\r\n\r\n/// This mixin acts like a function so I don't have to write the same code twice. So it works for both with and without breakpoints.\r\n/// @ignore @author Theodoros Kondakos\r\n/// @ignore @link   https://github.com/TheoKondak\r\n/// @access private\r\n/// @group dev\r\n/// @param  {string | list}  $cur-arg - The currect arguement passed from flex mixin\r\n@mixin flex-properties-beta($has-breakpoint, $breakpoint-value, $has-flex-direction, $flex-direction-value, $has-wrap, $wrap-value, $has-justify-content, $justify-content-value, $has-align-content, $align-content-value, $has-align-items, $align-items-value, $has-gap, $gap-value, $has-flex, $flex-value, $has-flex-basis, $flex-basis-value, $has-align-self, $align-self-value, $is-important, $has-auto-gap) {\r\n  $calculated-gap-value: null;\r\n\r\n  // Flex Direction\r\n  @if $has-flex-direction {\r\n    flex-direction: #{map-get(getMap($css-properties, flex, flex-direction), $flex-direction-value)} #{css-property($is-important, '!important')};\r\n  }\r\n\r\n  // Flex Wrap\r\n  @if $has-wrap {\r\n    flex-wrap: #{map-get(getMap($css-properties, flex, wrap), $wrap-value)} #{css-property($is-important, '!important')};\r\n  }\r\n\r\n  // Justify Content\r\n  @if $has-justify-content {\r\n    justify-content: #{map-get(getMap($css-properties, flex, justify-content), $justify-content-value)} #{css-property($is-important, '!important')};\r\n  }\r\n\r\n  // Align Content\r\n  @if $has-align-content {\r\n    align-content: #{map-get(getMap($css-properties, flex, align-content), $align-content-value)} #{css-property($is-important, '!important')};\r\n  }\r\n  // Align Items\r\n  @if $has-align-items {\r\n    align-items: #{map-get(getMap($css-properties, flex, align-items), $align-items-value)} #{css-property($is-important, '!important')};\r\n  }\r\n\r\n  // Gap\r\n  @if $has-gap {\r\n    @if length($gap-value) == 2 {\r\n      @include spacing-beta((g, list.nth($gap-value, 1), list.nth($gap-value, 2)));\r\n\r\n      //   @debug list.nth($gap-value, 1);\r\n\r\n      @if list.nth($gap-value, 1) == 'g' or list.nth($gap-value, 1) == 'l' or list.nth($gap-value, 1) == 'r' {\r\n        $calculated-gap-value: get(spacing, list.nth($gap-value, 2));\r\n      }\r\n    }\r\n    // If it has scale\r\n    @else if length($gap-value) == 3 {\r\n      @include spacing-beta((g, list.nth($gap-value, 1), list.nth($gap-value, 2), list.nth($gap-value, 3)));\r\n\r\n      //   @debug list.nth($gap-value, 1);\r\n\r\n      @if list.nth($gap-value, 1) == 'g' or list.nth($gap-value, 1) == 'l' or list.nth($gap-value, 1) == 'r' or type(list.nth($gap-value, 1), ('number')) and not unitless(list.nth($gap-value, 1)) {\r\n        $calculated-gap-value: get(spacing, list.nth($gap-value, 2)) * list.nth($gap-value, 3);\r\n      }\r\n    }\r\n  }\r\n\r\n  // Flex | Flex Basis\r\n  // If its flex property, the list has 3 items, flex-grow, flex-shrink, flex-basis\r\n  @if $has-flex {\r\n    @if type(list.nth($flex-value, 2), (number)) {\r\n      @if math.is-unitless(list.nth($flex-value, 2)) {\r\n        @if type(list.nth($flex-value, 3), (number)) {\r\n          > * {\r\n            @if $has-gap and $has-auto-gap {\r\n              flex: #{list.nth($flex-value, 1)} #{list.nth($flex-value, 2)} calc(#{list.nth($flex-value, 3)} - #{$calculated-gap-value}) #{css-property($is-important, '!important')};\r\n            } @else {\r\n              flex: #{list.nth($flex-value, 1)} #{list.nth($flex-value, 2)} #{list.nth($flex-value, 3)} #{css-property($is-important, '!important')};\r\n            }\r\n          }\r\n        } @else if contains(getMap($css-properties, width), list.nth($flex-value, 3)) {\r\n          // For auto etc\r\n          > * {\r\n            flex: #{list.nth($flex-value, 1)} #{list.nth($flex-value, 2)} #{list.nth($flex-value, 3)} #{css-property($is-important, '!important')};\r\n          }\r\n        }\r\n      } @else {\r\n        @warn 'Wrong properties in flex child list. Expected a list of 2 unitless numbers and a flex basis property (0 0 20px) instead received: ' $cur-arg;\r\n      }\r\n    } @else {\r\n      @warn unquote('Wrong properties in flex child list. Expected a list of 2 unitless numbers and a flex basis property (0 0 20px). Instead received: ') $cur-arg;\r\n    }\r\n  }\r\n  // If the list has a single arguement, it is flex-basis\r\n  @else if $has-flex-basis {\r\n    @if (type($flex-basis-value, (number)) and not unitless($flex-basis-value)) or contains(getMap($css-properties, width), $flex-basis-value) {\r\n      > * {\r\n        @if $has-gap and $has-auto-gap {\r\n          flex: calc(#{$flex-basis-value} - #{$calculated-gap-value}) #{css-property($is-important, '!important')};\r\n        } @else {\r\n          flex-basis: #{$flex-basis-value} #{css-property($is-important, '!important')};\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // If has align-self: stretch for child element, to equalize column height\r\n  @if $has-align-self {\r\n    > * {\r\n      align-self: #{map-get(getMap($css-properties, flex, align-self), $align-self-value)} #{css-property($is-important, '!important')};\r\n    }\r\n  }\r\n}\r\n","@use 'sass:list';\r\n@use 'sass:string';\r\n@use 'sass:map';\r\n@use 'sass:math';\r\n@use '../functions' as *;\r\n@use '../mixins/private/flex-properties-beta' as *;\r\n@use '../misc/css-properties' as *;\r\n// @use './spacing' as *;\r\n@use '../../../../../sin.config' as *;\r\n\r\n/// Use flex in one line! With this mixin, you can achieve most flex functionality just in one line. Each set of rules sits within a sass list. Each list can take a breakpoint, and abreviations of flex properties. Each list, should be 1 breakpoint.\r\n/// <hr/>\r\n/// <h3>Each `list` contains:</h3> <br/>\r\n///\r\n/// - A breakpoint from `sin.config`. This is optional. If there is no breakpoint, the rules will be applied to all screen sizes\r\n/// - Abreviations of flex properties. To see a list of supported properties, call the mixin without passing parameters.\r\n/// <br/> All parent properties are supported.\r\n/// - Gap uses spacing mixin to calculatee the values, so use the same syntax. The difference though is that this times it only takes two parameters, since spacing property is always gap.\r\n/// - For child elements flex-basis, flex, and align-self properties are supported. <br>\r\n///   - **flex-basis**: is an scss list containing one element, for example `(45%)`\r\n///   - **flex**: takes 3 properties, flex-grow, flex-shring and flex-basis\r\n///   - **align-self**: takes abreviations of align-self property.\r\n/// - **debug**: pass 'debug' as a parameter to a list to see a debug log about the current list of properties.\r\n/// - **auto-gap**: with Sinister, you can automatically negate gap values from flex and flex-basis properties for the x axis, so gap becomes even easier to use. Note that only gap that is nested in the current list can be calculated for now. Use with caution though, because there might be some side effects.\r\n/// - **!i**: pass '!i' string as a parameter to add important to every parameter of the current list. Note that you must add the single quotes in the parameter, otherwise it will not work.\r\n/// @ignore @author Theodoros Kondakos\r\n/// @ignore @link   https://github.com/TheoKondak\r\n/// @access public\r\n/// @group experimental\r\n/// @param  {arglist}  $args... - An arglist of lists.\r\n/// @example scss See available properties and values\r\n/// .sin{\r\n///   @include flex-beta();\r\n/// }\r\n/// @example scss Examples\r\n/// .sin{\r\n///  @include flex-beta(\r\n///   (fd-cl, ai-c, '!i'), // Flex direction column, align items center, and every css property will become !important\r\n///   (xs, fd-r, w-w, jc-c), // From breakpoint xs flex direction row, wrap: wrap, justify content center.\r\n///   (md, (g,1,.5)), // From breakpoint md, gap general direction (all directions), distance 1 from `_sin.config.scss`, with 0.5 scale\r\n///   (lg, (1 0 auto)), // From breakpoint lg, flex-basis for all first level child elements, flex grow 1, flex shring 0, flex auto\r\n///   (xl, fd-r, w-w, jc-c, ai-fs, ac-c, (x,2), (1 1 43%)), // From breakpoint xl, gap on x axis only (left, right) distance 2 from `_sin.config.scss`, and lastly flex-basis property.\r\n///   (debug, (g, 1, 1.2), (0 0 43%),  auto-gap) // Debug will print a log, will add gap in all directions, distance 1, scale 1.2, flex-grow 1, flex shrink 0, flex-basis 43, and has auto gap, which will be translated to `flex: 0 0 calc(43% - 1.8rem)`\r\n///  );\r\n/// }\r\n\r\n@mixin flex-beta($args...) {\r\n  // It takes a list of Sins\r\n  // Itterate / check first level map\r\n  @if (length($args) > 0) and type($args, 'arglist') {\r\n    @each $sin-arg in $args {\r\n      $debug: false;\r\n      $has-auto-gap: false;\r\n      $is-important: false;\r\n      $has-breakpoint: false;\r\n      $breakpoint-value: null;\r\n      $has-flex-direction: false;\r\n      $flex-direction-value: null;\r\n      $has-wrap: false;\r\n      $wrap-value: null;\r\n      $has-justify-content: false;\r\n      $justify-content-value: null;\r\n      $has-align-content: false;\r\n      $align-content-value: null;\r\n      $has-align-items: false;\r\n      $align-items-value: null;\r\n      $has-gap: false;\r\n      $gap-value: null;\r\n      $has-flex: false; // flex property ex flex: 0 0 100%;\r\n      $flex-value: null;\r\n      $has-flex-basis: false;\r\n      $flex-basis-value: null;\r\n      $has-align-self: false;\r\n      $align-self-value: null;\r\n\r\n      @if (length($sin-arg) > 0) and type($args, 'arglist') {\r\n        // For each arguement of the list\r\n        @each $cur-arg in $sin-arg {\r\n          // @debug $cur-arg;\r\n\r\n          @if $cur-arg == 'debug' {\r\n            $debug: true;\r\n            @debug '=====';\r\n            @debug 'Starting Flex Debug';\r\n          }\r\n\r\n          @if $debug {\r\n            @debug '----';\r\n            @debug unquote('Current Arguement: #{$cur-arg}');\r\n          }\r\n\r\n          @if $cur-arg == '!i' {\r\n            $is-important: true;\r\n          }\r\n\r\n          // If contains Breakpoint\r\n          @if contains(get(breakpoints), list.nth($cur-arg, 1)) {\r\n            $has-breakpoint: true;\r\n            $breakpoint-value: $cur-arg;\r\n          }\r\n\r\n          // @debug getMap($css-properties, flex, flex-direction);\r\n          // @debug $cur-arg;\r\n\r\n          // Flex Direction\r\n          // @debug contains(getMap($css-properties, flex, flex-direction), $cur-arg);\r\n          @if contains(getMap($css-properties, flex, flex-direction), $cur-arg) {\r\n            $has-flex-direction: true;\r\n            $flex-direction-value: $cur-arg;\r\n          }\r\n\r\n          // Flex Wrap\r\n          @if contains(getMap($css-properties, flex, wrap), $cur-arg) {\r\n            $has-wrap: true;\r\n            $wrap-value: $cur-arg;\r\n          }\r\n\r\n          // Justify Content\r\n          @if contains(getMap($css-properties, flex, justify-content), $cur-arg) {\r\n            $has-justify-content: true;\r\n            $justify-content-value: $cur-arg;\r\n          }\r\n\r\n          // Align Content\r\n          @if contains(getMap($css-properties, flex, align-content), $cur-arg) {\r\n            $has-align-content: true;\r\n            $align-content-value: $cur-arg;\r\n          }\r\n\r\n          // Align Items\r\n          @if contains(getMap($css-properties, flex, align-items), $cur-arg) {\r\n            $has-align-items: true;\r\n            $align-items-value: $cur-arg;\r\n          }\r\n\r\n          // Gap\r\n          @if type($cur-arg, (list)) and contains(getMap($css-properties, spacing, spacing-direction), list.nth($cur-arg, 1)) {\r\n            $has-gap: true;\r\n            $gap-value: $cur-arg;\r\n          }\r\n\r\n          /// Flex | Flex Basis\r\n          /// If its flex property, the list has 3 items, flex-grow, flex-shrink, flex-basis\r\n          @if type($cur-arg, (list)) and length($cur-arg) == 3 and type(list.nth($cur-arg, 1), (number)) {\r\n            $has-flex: true;\r\n            $flex-value: $cur-arg;\r\n          }\r\n\r\n          // If the list has a single arguement, it is flex-basis\r\n          @if length($cur-arg) == 1 and (type($cur-arg, (number)) and not unitless($cur-arg)) or contains(getMap($css-properties, width), $cur-arg) {\r\n            $has-flex-basis: true;\r\n            $flex-basis-value: $cur-arg;\r\n          }\r\n\r\n          /// Child Stretch for equal height columns\r\n          @if contains(getMap($css-properties, flex, align-self), $cur-arg) {\r\n            $has-align-self: true;\r\n            $align-self-value: $cur-arg;\r\n          }\r\n\r\n          @if $cur-arg == auto-gap {\r\n            $has-auto-gap: true;\r\n          }\r\n        }\r\n\r\n        @if $debug {\r\n          @debug '----';\r\n          @debug unquote('Has Breakpoint: #{$has-breakpoint}');\r\n          @debug unquote('Breakpoint Value: #{$breakpoint-value}');\r\n          @debug '';\r\n          @debug unquote('Has direction: #{$has-flex-direction}');\r\n          @debug unquote('Direction Value: #{$flex-direction-value}');\r\n          @debug '';\r\n          @debug unquote('Has wrap: #{$has-wrap}');\r\n          @debug unquote('Wrap Value: #{$wrap-value}');\r\n          @debug '';\r\n          @debug unquote('Has Justify Content: #{$has-justify-content}');\r\n          @debug unquote('Justify Content Value: #{$justify-content-value}');\r\n          @debug '';\r\n          @debug unquote('Has Align Content: #{$has-align-content}');\r\n          @debug unquote('Align Content Value: #{$align-content-value}');\r\n          @debug '';\r\n          @debug unquote('Has Align Items: #{$has-align-items}');\r\n          @debug unquote('Align Items Value: #{$align-items-value}');\r\n          @debug '';\r\n          @debug unquote('Has Gap: #{$has-gap}');\r\n          @debug unquote('Gap Value: #{$gap-value}');\r\n          @debug '';\r\n          @debug unquote('Has Auto-gap: #{$has-auto-gap}');\r\n          @debug '';\r\n          @debug unquote('Has Flex: #{$has-flex}');\r\n          @debug unquote('Flex Value: #{$flex-value}');\r\n          @debug '';\r\n          @debug unquote('Has Flex-Basis: #{$has-flex-basis}');\r\n          @debug unquote('Flex-Basis Value: #{$flex-basis-value}');\r\n          @debug '';\r\n          @debug unquote('Has Align-Self: #{$has-align-self}');\r\n          @debug unquote('Align-Self Value: #{$align-self-value}');\r\n          @debug '';\r\n          @debug unquote('Is Important: #{$is-important}');\r\n          @debug '----';\r\n        }\r\n\r\n        // If the Sin contains an existing breakpoint\r\n        @if $has-breakpoint {\r\n          @media (min-width: get(breakpoints, $breakpoint-value)) {\r\n            @if $is-important {\r\n              display: flex !important;\r\n            } @else {\r\n              display: flex;\r\n            }\r\n            @include flex-properties-beta($has-breakpoint: $has-breakpoint, $breakpoint-value: $breakpoint-value, $has-flex-direction: $has-flex-direction, $flex-direction-value: $flex-direction-value, $has-wrap: $has-wrap, $wrap-value: $wrap-value, $has-justify-content: $has-justify-content, $justify-content-value: $justify-content-value, $has-align-content: $has-align-content, $align-content-value: $align-content-value, $has-align-items: $has-align-items, $align-items-value: $align-items-value, $has-gap: $has-gap, $gap-value: $gap-value, $has-flex: $has-flex, $flex-value: $flex-value, $has-flex-basis: $has-flex-basis, $flex-basis-value: $flex-basis-value, $has-align-self: $has-align-self, $align-self-value: $align-self-value, $is-important: $is-important, $has-auto-gap: $has-auto-gap);\r\n\r\n            // For each list, check the input properties\r\n            @each $cur-arg in $sin-arg {\r\n              // @debug $cur-arg;\r\n              // Load All the properties from flex properties mixin\r\n            }\r\n          }\r\n        } @else {\r\n          display: flex #{css-property($is-important, '!important')};\r\n\r\n          @include flex-properties-beta($has-breakpoint: $has-breakpoint, $breakpoint-value: $breakpoint-value, $has-flex-direction: $has-flex-direction, $flex-direction-value: $flex-direction-value, $has-wrap: $has-wrap, $wrap-value: $wrap-value, $has-justify-content: $has-justify-content, $justify-content-value: $justify-content-value, $has-align-content: $has-align-content, $align-content-value: $align-content-value, $has-align-items: $has-align-items, $align-items-value: $align-items-value, $has-gap: $has-gap, $gap-value: $gap-value, $has-flex: $has-flex, $flex-value: $flex-value, $has-flex-basis: $has-flex-basis, $flex-basis-value: $flex-basis-value, $has-align-self: $has-align-self, $align-self-value: $align-self-value, $is-important: $is-important, $has-auto-gap: $has-auto-gap);\r\n        }\r\n      }\r\n    }\r\n  } @else {\r\n    @debug help($config-map: getMap($css-properties, flex), $intro-msg: 'Printing available Flex Properties:', $msg: 'Documentation: https://theokondak.github.io/Sinister/#experimental-mixin-flex-beta');\r\n    @debug help(spacing, $intro-msg: 'Printing available Spacing values:', $msg: 'Documentation: https://theokondak.github.io/Sinister/#variable-sinister-default-configuration');\r\n    @debug help(breakpoints, $intro-msg: 'Printing available breakpoints:', $msg: 'Documentation: https://theokondak.github.io/Sinister/#variable-sinister-default-configuration');\r\n  }\r\n}\r\n","@use 'sass:map';\r\n@use 'sass:string';\r\n@use 'sass:list';\r\n@use '../../../../../sin.config' as *;\r\n@use './../functions' as *;\r\n@use '../misc/css-properties' as *;\r\n@use '../mixins/private/' as *;\r\n@use '../grid/responsive' as *;\r\n\r\n@mixin css-property-line-with-scale($property: $property, $current-direction: $current-direction, $value: $value, $is-important: $is-important, $scale: $scale, $debug: false) {\r\n  @if $debug {\r\n    @debug '@mixin css-property-line-with-scale calculating rule';\r\n    @debug unquote('Property: #{$property}');\r\n    @debug unquote('Current Direction: #{$current-direction}');\r\n    @debug unquote('Value: #{$value}');\r\n    @debug unquote('Is Important: #{$is-important}');\r\n    @debug unquote('Scale: #{$scale}');\r\n  }\r\n\r\n  // Handle Gap exception\r\n  @if $property == 'g' {\r\n    $calculate-value: $value * $scale;\r\n\r\n    #{$current-direction}: #{$calculate-value} #{css-property($is-important, '!important')};\r\n  } @else {\r\n    $calculate-value: $value * $scale;\r\n    #{getMap(getMap($css-properties, spacing, spacing-properties), $property)}-#{$current-direction}: #{$calculate-value} #{css-property($is-important, '!important')};\r\n  }\r\n}\r\n\r\n/// The `spacing` mixin allows you to add consistent spacing using values form `_sin.config` or the `default-configuration`.\r\n/// @group experimental\r\n/// @parameter {string} $debug - If the first parameter of an arguement list is 'debug' then a debug log will be printed for the specific arguement list. If its the first arguement of spacing mixin, then it will print debug log of all lists\r\n/// @parameter {string} $breakpoint - A breakpoint from breakpoints in Sinister configuration.\r\n/// @parameter {string} $property - The first letter of a spacing property, m for margin, p for padding, g for gap.\r\n/// @parameter {string} $direction - The first letter of a spacing property direction. For margin and padding, t for top, r for right, b for bottom, l for left. Gap property has only generic, column and gap, so if any of t,b is selected row-gap will be applied and similar for column-gap.\r\n/// @parameter {string} $value - A spacing value from spacing in Sinister configuration\r\n/// @parameter {number} $scale - A number that will be multiplied with the spacing value selected. Tuning this is not suggested. Default value is 1.\r\n/// @parameter {string} $important - If `!i` is present, the style will get `!important`\r\n/// @parameter {string} $debug - You can enable debug by adding a `debug` string in the arguements\r\n/// @link https://utopia.fyi/space/calculator\r\n/// @example scss See available properties and values\r\n/// .sin{\r\n///   @debug spacing();\r\n/// }\r\n/// @example scss Common use case\r\n/// .sin{\r\n///  @include spacing(\r\n///   (m, g, 1), // Margin, general (all directions), distance 1 (from sinister configuration)\r\n///   (xs, m, g, 2), // From breakpoint xs from sinister configuration, direction general, distance 2\r\n///   (md, p, y, 2, 1.4), // From breakpoint md, padding, y axis, distance 2, and scale 1.4\r\n///   (lg, m, x, auto), // From breakpoint lg, x axis, margin auto\r\n///   (xl, m, t, 2, '!i') // From breakpoint xl, direction top, distance 2, !important is true, scale is default\r\n///  );\r\n/// }\r\n/// @example scss Common use case\r\n/// .sin{\r\n///  @include spacing(\r\n///     debug, // Will print debug log for both list items\r\n///     (m, g, 1),\r\n///     (xs, m, g, 2),\r\n///   );\r\n/// }\r\n/// @example scss Common use case\r\n/// .sin{\r\n///  @include spacing(\r\n///   (debug, m, g, 1),  // Will print debug log for this item\r\n///   (xs, m, g, 2rem), // From xs breakpoint, margin general 2rem\r\n///   (g, t, 2) // property gap, direction is top, but gap works on x and y axis so in that case top is translated to top and bottom, or y axis\r\n///  );\r\n/// }\r\n\r\n@mixin spacing-beta($args...) {\r\n  // Check that there are arguements\r\n  @if (length($args) > 0) {\r\n    // For each arguement\r\n    $debug: false;\r\n    @each $arg in $args {\r\n      $breakpoint: null;\r\n      $property: null;\r\n      $direction: null;\r\n      $value: 0;\r\n      $scale: 1;\r\n\r\n      $is-important: false;\r\n      $valid-breakpoint: false;\r\n      $valid-direction: false;\r\n      $valid-property: false;\r\n      $valic-css-value: false; // To check if the input is a margin value with units ex `2rem` or a sin config value ex `2`\r\n      $valid-distance: false;\r\n      $has-scale: false;\r\n\r\n      @if $arg == 'debug' {\r\n        $debug: true;\r\n        @debug '======';\r\n        @debug 'STARTING @mixin spacing DEBUGGING for all lists';\r\n        @debug '---';\r\n      }\r\n\r\n      // Check if important is present\r\n      @each $prop in $arg {\r\n        // Check if Debug Is enabled\r\n\r\n        @if $prop == 'debug' {\r\n          $debug: true;\r\n          @debug '======';\r\n          @debug 'STARTING @mixin spacing() DEBUGGING';\r\n          @debug '---';\r\n        }\r\n\r\n        // Check if there is a spacing distance which is a number, and a scale. if there are two similar numbers, and one of the numbers belongs to sinister configuration, then consider this number as scale as well\r\n        @if is-number($prop) {\r\n          @if $debug {\r\n            @debug unquote('Current Arguement is a number');\r\n          }\r\n\r\n          // Check if it is unitless (otherwise it could be a config value or css value)\r\n          @if not unitless($prop) {\r\n            $valic-css-value: true;\r\n            $valid-distance: true;\r\n            $value: $prop;\r\n\r\n            @if $debug {\r\n              @debug unquote('Arguement is a valid spacing distance from _sin.config.scss | Value: #{$value}');\r\n              @debug '---';\r\n            }\r\n            // Check if is a distance, number that is contained in _sin.config.scss\r\n          } @else if contains(get(spacing), $prop) {\r\n            $valid-distance: true;\r\n\r\n            $value: get(spacing, $prop);\r\n\r\n            @if $debug {\r\n              @debug unquote('Arguement is a css spacing distance (number with unit ex 2rem) | Value: #{$value}');\r\n              @debug '---';\r\n            }\r\n          }\r\n\r\n          // If is a number, but does not exist in _sin.config.scss and is a unitless number\r\n          @if not contains(get(spacing), $prop) and unitless($prop) {\r\n            $has-scale: true;\r\n            $scale: $prop;\r\n\r\n            @if $debug {\r\n              @debug unquote('Arguement is a scale arguement | Value: #{$scale}');\r\n              @debug '---';\r\n            }\r\n          }\r\n          // Check if spacing property is a global spacing value (auto, inherit etc)\r\n        } @else if map-get(getMap($css-properties, spacing, global-spacing-values), $prop) != null {\r\n          $valid-distance: true;\r\n          $value: $prop;\r\n\r\n          @if $debug {\r\n            @debug unquote('Arguement is a global spacing value | Value: #{$value}');\r\n            @debug '---';\r\n          }\r\n        }\r\n\r\n        // If has Important\r\n        @if $prop == '!i' {\r\n          $is-important: true;\r\n\r\n          @if $debug {\r\n            @debug unquote('Is Important | Value: #{$is-important}');\r\n            @debug '---';\r\n          }\r\n        }\r\n\r\n        // Valid Breakpoint\r\n        @if contains(get(breakpoints), $prop) {\r\n          $valid-breakpoint: true;\r\n          $breakpoint: $prop;\r\n          @if $debug {\r\n            @debug unquote('The arguement is a valid breakpoint | Value: #{$breakpoint}');\r\n            @debug '---';\r\n          }\r\n        }\r\n\r\n        // Direction\r\n        @if (contains(getMap($css-properties, spacing, spacing-direction), $prop)) and $valid-direction == false and $valid-property == true {\r\n          $valid-direction: true;\r\n          // If the spacing property is gap\r\n\r\n          @if $property == 'g' {\r\n            @if $prop == 't' or $prop == 'b' or $prop == 'y' {\r\n              $direction: row-gap;\r\n            } @else if $prop == 'l' or $prop == 'r' or $prop == 'x' {\r\n              $direction: column-gap;\r\n            } @else if $prop == 'g' {\r\n              $direction: gap;\r\n            }\r\n\r\n            @if $debug {\r\n              @debug unquote('The arguement is a valid gap direction arguement | Value: #{$direction}');\r\n              @debug '---';\r\n            }\r\n          } @else {\r\n            // Prep the direction CSS property\r\n            @each $prop in map-get(getMap($css-properties, spacing, spacing-directions), $prop) {\r\n              $direction: append($direction, $prop);\r\n            }\r\n            @if $debug {\r\n              @debug unquote('Valid direction property | Value: #{$direction}');\r\n              @debug '---';\r\n            }\r\n          }\r\n        }\r\n\r\n        // Valid Property\r\n        @if contains(getMap($css-properties, spacing, spacing-properties), $prop) and $valid-property == false {\r\n          $valid-property: true;\r\n          $property: $prop;\r\n\r\n          @if $debug {\r\n            @debug unquote('Valid Property | Value: #{$property}');\r\n            @debug '---';\r\n          }\r\n        }\r\n      }\r\n\r\n      // Create CSS Rules\r\n      @if $valid-property and $valid-direction and $valid-distance {\r\n        // If it has breakpoint\r\n        @if $valid-breakpoint {\r\n          @include mqMin($breakpoint) {\r\n            // If has scale and the value is a number\r\n            @if ($has-scale and type($value, ('number'))) {\r\n              @each $current-direction in $direction {\r\n                // The default value is null, if its not the default value then..\r\n                @if $current-direction != null {\r\n                  @include css-property-line-with-scale($property: $property, $current-direction: $current-direction, $value: $value, $scale: $scale, $is-important: $is-important, $debug: $debug);\r\n                }\r\n              }\r\n            } @else {\r\n              // If it does not have scale\r\n\r\n              @each $current-direction in $direction {\r\n                // The default value is null, if its not the default value then..\r\n                @if $current-direction != null {\r\n                  @include css-property-line($property: $property, $current-direction: $current-direction, $value: $value, $is-important: $is-important, $debug: $debug);\r\n                }\r\n              }\r\n            }\r\n          }\r\n        } @else {\r\n          // If it does not have a valid breakpoint\r\n          // @debug unquote('Value: #{$value}');\r\n          // If has scale and the value is a number\r\n\r\n          @if $has-scale and type($value, ('number')) {\r\n            // For each direction\r\n            @each $current-direction in $direction {\r\n              // The default value is null, if its not the default value then..\r\n              @if $current-direction != null {\r\n                @include css-property-line-with-scale($property: $property, $current-direction: $current-direction, $value: $value, $scale: $scale, $is-important: $is-important, $debug: $debug);\r\n              }\r\n            }\r\n          } @else if type($value, ('number')) {\r\n            // If its a number but doesn't have scale\r\n\r\n            @each $current-direction in $direction {\r\n              // The default value is null, if its not the default value then..\r\n              @if $current-direction != null {\r\n                @include css-property-line($property: $property, $current-direction: $current-direction, $value: $value, $is-important: $is-important, $debug: $debug);\r\n              }\r\n            }\r\n          } @else if map-get(getMap($css-properties, spacing, global-spacing-values), $value) != null {\r\n            // If it is a non numeric value (auto, inherit etc)\r\n            // For each direction\r\n            @each $current-direction in $direction {\r\n              // The default value is null, if its not the default value then..\r\n              @if $current-direction != null {\r\n                @include css-property-line($property: $property, $current-direction: $current-direction, $value: $value, $is-important: $is-important, $debug: $debug);\r\n              }\r\n            }\r\n          } @else {\r\n            @debug getMap($css-properties, spacing, global-spacing-values);\r\n          }\r\n        }\r\n      }\r\n\r\n      @if $debug {\r\n        @debug '======';\r\n      }\r\n    }\r\n  } @else {\r\n    @debug help($config-map: getMap($css-properties, spacing), $intro-msg: 'Printing available Spacing Properties:', $msg: 'Documentation: https://theokondak.github.io/Sinister/#grid-mixin-spacing-beta');\r\n    @debug help(spacing, $intro-msg: 'Printing available Spacing values:', $msg: 'Documentation: https://theokondak.github.io/Sinister/#variable-sinister-default-configuration');\r\n    @debug help(breakpoints, $intro-msg: 'Printing available breakpoints:', $msg: 'Documentation: https://theokondak.github.io/Sinister/#variable-sinister-default-configuration');\r\n  }\r\n}\r\n",".test-spacing {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  gap: 3rem;\n}\n.test-spacing > * {\n  flex: 0 0 300px;\n}\n\n.grid {\n  display: grid;\n  gap: 1.5rem;\n  grid-template-columns: repeat(12, 1fr);\n  grid-auto-flow: dense;\n}\n.grid > * {\n  grid-column: span 4;\n}\n.grid > .small {\n  grid-column: span 2;\n}\n.grid > .large {\n  grid-column: span 8;\n}\n.grid > .extra-large {\n  grid-column: span 12;\n}\n.grid > * {\n  background-color: orange;\n  padding: 2rem;\n}\n\n.test {\n  color: blue;\n}\n\n.test {\n  background-color: orangered;\n}\n\n.test {\n  color: blue;\n}","@use 'sass:list';\r\n@use '../../../../../sin.config' as *;\r\n@use '../grid/spacing-beta' as *;\r\n\r\n@mixin massonry($column-count: 12, $item-column-map: (normal: 4, small: 2, large: 8, extra-large:12), $gap: (g, 1)){\r\n  // Source https://www.youtube.com/watch?v=xMsckmmd5Dw&ab_channel=WesBos\r\n  display: grid;\r\n  @include spacing-beta((g,list.nth($gap, 1), list.nth($gap, 2)));\r\n\r\n\r\n  grid-template-columns: repeat(#{$column-count}, 1fr);\r\n  grid-auto-flow: dense;\r\n\r\n  $first-map-value: false;\r\n  @each $item-column-map-val-label, $item-column-map-val in $item-column-map{\r\n\r\n      \r\n      @if not $first-map-value{\r\n        \r\n        > *{\r\n            grid-column: span #{$item-column-map-val};\r\n        }\r\n\r\n          $first-map-value: true;\r\n  }@else{\r\n      > .#{$item-column-map-val-label}{\r\n          grid-column: span #{$item-column-map-val};\r\n          \r\n      }\r\n  }\r\n  \r\n  }\r\n\r\n}","@use './../../functions/' as *;\r\n@use '../../misc/css-properties' as *;\r\n\r\n@mixin css-property-line($property: $property, $current-direction: $current-direction, $value: $value, $is-important: $is-important, $debug: false) {\r\n  @if $debug {\r\n    @debug '@mixin css-property-line-with-scale calculating rule';\r\n    @debug unquote('Property: #{$property}');\r\n    @debug unquote('Current Direction: #{$current-direction}');\r\n    @debug unquote('Value: #{$value}');\r\n    @debug unquote('Is Important: #{$is-important}');\r\n  }\r\n\r\n  // Handle Gap exception\r\n  @if $property == 'g' {\r\n    #{$current-direction}: #{$value} #{css-property($is-important, '!important')};\r\n  } @else {\r\n    #{getMap(getMap($css-properties, spacing, spacing-properties), $property)}-#{$current-direction}: #{$value} #{css-property($is-important, '!important')};\r\n  }\r\n}\r\n"],"names":[],"sourceRoot":""}