@use 'sass:string';
@use 'sass:map';
@use 'sass:list';
@use '../../../../../sin.config' as *;

@use './get-func' as *;

/// @name spacing
/// @group utility
/// @ignore @author Theodoros Kondakos
/// @ignore @link   https://github.com/TheoKondak
/// @param  {map}  $new-map - A map that contains setting values to update or add new data to sinister configuration
/// @param  {map}  $original-map - By default $original map is pointing to the default sinister configuration.
/// @return {map}  - Returns an updated map that is a merge of $new-map and $original-map.
/// @example scss
/// .sin{
///   @include spacing((m,g,1,1.2),(xs, m,g,2,.8));
/// }

@function spacing($value: 0, $scale: 1) {
  @if map.has-key(get(spacing), $value) and type-of($scale) == 'number' {
    // If the $value is 0, instead of error return the default, but send a warning during compilation.

    @return calc(#{get(spacing, $value)} * #{$scale});
  } @else {
    @warn 'Either $value does not exist in sinConfig, or scale is not a number. See bellow for more.';
    @debug 'Your input: $value: #{$value}, $scale: #{$scale}';
    @debug 'Available spacings $values';
    @each $spacingId, $spacing in get(spacing) {
      @debug ' #{$spacingId}: #{$spacing}';
    }
    @error 'Spacing function error.';
  }
}
