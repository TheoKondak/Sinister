@use 'sass:string';
@use 'sass:map';
@use 'sass:list';
// @use '../../../../../../sin.config' as *;

@use './../private/get-func' as *;

// @name spacing
// @group utilitySpacing
// @param {number | string} $value [0] - A map that contains setting values to update or add new data to sinister configuration
// @param {number} $scale [1] - Scale up or down the spacing value
// @return {number} - Returns a spacing css value
@function spacing($value: 0, $scale: 1) {
  @if map.has-key(get(spacing), $value) and type-of($scale) == 'number' {
    // If the $value is 0, instead of error return the default, but send a warning during compilation.

    @return calc(#{get(spacing, $value)} * #{$scale});
  } @else {
    @warn 'Either $value does not exist in sinConfig, or scale is not a number. See bellow for more.';
    @debug 'Your input: $value: #{$value}, $scale: #{$scale}';
    @debug 'Available spacings $values';
    @each $spacingId, $spacing in get(spacing) {
      @debug ' #{$spacingId}: #{$spacing}';
    }
    @error 'Spacing function error.';
  }
}
