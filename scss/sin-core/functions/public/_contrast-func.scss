@use 'sass:string';
@use 'sass:map';
@use 'sass:list';
@use '../../../../../../sin.config' as *;

@use './../private/getMap-func' as *;
@use './../private/get-func' as *;
@use './../private/contains-func' as *;
@use './../public/color-func' as *;

/// Test if two colors have enough contrast for readability purposes.
/// @name contrast
/// @link https://jonnykates.medium.com/automating-colour-contrast-ratios-with-sass-e201f3b52797
/// @group utility
/// @param  {string}  $debug - Enable debugging information | Set `$debug: true` as a parameter
/// @param  {color}  $foreground-color - The foreground color
/// @param  {color}   $background-color - The background color
/// @param  {number} $threshold [450] - Set the threshold for the contrast. The higher the value, the more contrast is required in order for the function to return true
/// @return {bool} - Returns true if enough contrast is detected between the colors.
/// @example scss will check if there is sufficient contrast, if yes, color will become white, otherwise will become random color from `_sin.config.scss`
/// .sin{
///     @if contrast(#fff, color(random-color)){
///        color: #fff;
///     }@else{
///        color: color(random-color);
///     }
///  }
@function contrast($foreground-color, $background-color, $threshold: 450, $debug: false) {
  $r: (max(red($foreground-color), red($background-color))) - (min(red($foreground-color), red($background-color)));
  $g: (max(green($foreground-color), green($background-color))) - (min(green($foreground-color), green($background-color)));
  $b: (max(blue($foreground-color), blue($background-color))) - (min(blue($foreground-color), blue($background-color)));
  $sum-rgb: $r + $g + $b;

  @if $debug == true {
    @debug unquote('======');
    @debug unquote('Debugging Contrast Function');
    @debug unquote('Foreground color: #{$foreground-color}');
    @debug unquote('Background color: #{$background-color}');
    @debug unquote('---');
    @debug unquote('Calculation Results:');
    @debug unquote('Red: #{$r}');
    @debug unquote('Green: #{$g}');
    @debug unquote('Blue: #{$b}');
    @debug unquote('---');
    @debug unquote('Threshold: #{$threshold}');
    @debug unquote('Return value: #{$sum-rgb}');
    @debug unquote('NOTE: Return value must be higher than the threshold value in order to have sufficient contrast.');
    @if $sum-rgb < $threshold {
      @debug unquote('Result: false');
    } @else {
      @debug unquote('Result: true');
    }
    @debug unquote('======');
  }

  @if $sum-rgb < $threshold {
    @return 'false';
  } @else {
    @return 'true';
  }
}
