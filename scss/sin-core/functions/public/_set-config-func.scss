@use './../../sinister-default-configuration' as *;
@use 'sass:map';
@use 'sass:string';
@use 'sass:list';
@use './../private/type-func' as *;

/// Process a single configuration map
/// @arg {map} - Current map
/// @return {map} - Updated map cofiguration

/// @ignore @author Theodoros Kondakos
/// @ignore @link   https://github.com/TheoKondak
/// @param  {map}  $new-map - A map that contains setting values to update or add new data to sinister configuration
/// @param  {map}  $add-maps - By default $original map is pointing to the default sinister configuration.
/// @return {map}  - Returns an updated map that is a merge of $new-map and $original-map.

@function set-config($new-map) {
  // Check if the `$new-map` is a type of `map`
  @if (type($new-map, (map))) {
    $default-configuration: $sinister-default-configuration;
    /// A new map to use for updating the return map
    $processing-map: ();
    /// The map to be returned as the final `$configuration`
    $return-map: $default-configuration;
    @each $original-key, $original-value in $default-configuration {
      @each $new-key, $new-value in $new-map {
        @if $original-key == $new-key {
          @if (type($new-value, (map))) {
            // Update the temporary map
            $processing-map: map.set($processing-map, $original-key, map.merge($original-value, $new-value));
            // Pass the data to the original map
            $return-map: map.merge($default-configuration, map.set($processing-map, $original-key, map.merge($original-value, $new-value)));
          } @else if (type($new-value, (list))) {
            $processing-map: map.set($processing-map, $original-key, list.append($original-value, $new-value));
            $return-map: map.merge($default-configuration, map.set($processing-map, $original-key, list.append($original-value, $new-value)));
          } @else if (type($new-value, ('string', 'bool', 'number', 'color', null))) {
            $processing-map: map.set($processing-map, $original-key, $new-value);
            $return-map: map.merge($default-configuration, map.set($processing-map, $original-key, $new-value));
          }
        }
      }
    }

    @return $return-map;
  } @else if type($new-map, (list)) {
  } @else {
    @error 'set-config function was called with invalid input. Was expecting a map but instead received: #{type-of($new-map)}';
    @return null;
  }
}
