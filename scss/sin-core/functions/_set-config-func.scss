@use './../sinister-default-configuration' as *;
@use 'sass:map';
@use 'sass:string';
@use 'sass:list';
@use './type-func' as *;

///
/// @author Theodoros Kondakos
/// @link   https://github.com/TheoKondak
///

/// Setup Configuration
///
/// @param  {map}  $new-map - A map that contains setting values to update or add new data to sinister configuration
/// @param  {map}  $add-maps - By default $original map is pointing to the default sinister configuration.
/// @return {map}  - Returns an updated map that is a merge of $new-map and $original-map.
///

@function set-config($new-map, $add-maps: $sinister-default-configuration) {
  $processing-map: ();
  $return-map: $add-maps;

  @if (type($new-map, (map))) {
    @each $original-key, $original-value in $add-maps {
      @each $new-key, $new-value in $new-map {
        @if $original-key == $new-key {
          @if (type($new-value, (map))) {
            // Update the temporary map
            $processing-map: map.set($processing-map, $original-key, map.merge($original-value, $new-value));
            // Pass the data to the original map
            $return-map: map.merge($add-maps, map.set($processing-map, $original-key, map.merge($original-value, $new-value)));
          } @else if (type($new-value, (list))) {
            $processing-map: map.set($processing-map, $original-key, list.append($original-value, $new-value));
            $return-map: map.merge($add-maps, map.set($processing-map, $original-key, list.append($original-value, $new-value)));
            // } @else if (type-of($new-value) == 'string') or (type-of($new-value) == 'bool') or (type-of($new-value) == 'number') or (type-of($new-value) == 'color') or (type-of($new-value) == 'null') {
          } @else if (type($new-value, ('string', 'bool', 'number', 'color', null))) {
            $processing-map: map.set($processing-map, $original-key, $new-value);
            $return-map: map.merge($add-maps, map.set($processing-map, $original-key, $new-value));
          }
        }
      }
    }

    @return $return-map;
  } @else if type($new-map, (list)) {
    @return $return-map;
  } @else {
    @error 'setConfig function was called with invalid input. Was expecting a map but instead received: #{type-of($new-map)}';
    @return null;
  }
}
