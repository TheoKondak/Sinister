// @use '../../../../../sin.config' as *;
@use 'sass:string';
@use 'sass:math';
@use '../functions/private' as *;

/// Create a simple css grid with a fixed number of columns
/// @group grid
/// @ignore @author Theodoros Kondakos
/// @param  {number}  $item-per-column [4] - The number of columns of the grid
/// @param  {string}  $element-type [*] - The number of columns of the grid
/// @param  {number}  $template-columns [12] - Breakpoint will work up to `$max`
/// @content
/// @example scss A layout with three columns
///   @use 'sin' as *;
///   .grid-example{
///     @include simple-grid(3){
///       background-color: purple;
///       padding: 1rem;
///     }
///   }
/// @example scss A layout with three columns
///   @use 'sin' as *;
///   .grid-example{
///     @include simple-grid(3, ".grid-example-item"){
///       background-color: purple;
///       padding: 1rem;
///     }
///   }
///
@mixin simple-grid($args...) {
  @if type($args, 'arglist') and length($args) > 1 {
    // Loop for debug only if it is present in the arguements
    @each $arg in $args {
      @if $arg == 'debug' {
        $debug: true;
      }
    }

    @each $arg in $args {
      // @debug type-of($arg);
      // @debug length($arg);

      @if type($arg, (list)) {
        @each $cur-arg in $arg {
          $debug: false;
          $valid-arguement: false;
          $has-breakpoint: false;
          $breakpoint: null;
          $has-items-per-column: false;
          $items-per-column: null;
          $has-element-type: false;
          $element-type: null;
          $has-template-columns: false;
          $template-columns: null;

          // If debug is part of list arguement
          @if $cur-arg == 'debug' {
            $debug: true;
            @debug '======';
            @debug 'STARTING @mixin simple-grid DEBUGGING';
            @debug '---';
          }

          @if type($cur-arg, (number)) {
            $has-items-per-column: true;
            $items-per-column: $cur-arg;
            $valid-arguement: true;

            @if $debug {
              @debug unquote('$has-items-per-column: #{$has-items-per-column}');
              @debug unquote('$items-per-column: #{$items-per-column}');
              @debug unquote('Is valid arguement: #{$valid-arguement}');
              @debug unquote('---');
            }
          }

          @if type($cur-arg, (string)) {
            $has-element-type: true;
            $element-type: $cur-arg;
            $valid-arguement: true;

            @if $debug {
              @debug unquote('$has-element-type: #{$has-element-type}');
              @debug unquote('$element-type: #{$element-type}');
              @debug unquote('Is valid arguement: #{$valid-arguement}');
              @debug unquote('---');
            }
          }

          @if type($cur-arg, (number)) and $has-items-per-column == true {
            $has-template-columns: true;
            $template-columns: $cur-arg;
            $valid-arguement: true;

            @if $debug {
              @debug unquote('$has-template-columns: #{$has-template-columns}');
              @debug unquote('$template-columns: #{$template-columns}');
              @debug unquote('Is valid arguement: #{$valid-arguement}');
              @debug unquote('---');
            }
          }
        }
      } @else if type($arg, (number, string)) {
        $valid-arguement: false;
        $has-items-per-column: false;
        $items-per-column: null;
        $has-element-type: false;
        $element-type: null;
        $has-template-columns: false;
        $template-columns: null;
        @each $cur-arg in $arg {
          @if $cur-arg == 'debug' {
            $debug: true;
          }

          @if type($cur-arg, (number)) {
            $has-items-per-column: true;
            $items-per-column: $cur-arg;
            $valid-arguement: true;

            @if $debug {
              @debug unquote('$has-items-per-column: #{$has-items-per-column}');
              @debug unquote('---');
            }
          }

          @if type($cur-arg, (string)) {
            $has-element-type: true;
            $element-type: $cur-arg;
            $valid-arguement: true;

            @if $debug {
              @debug unquote('$element-type: #{$element-type}');

              @debug unquote('---');
            }
          }

          @if type($cur-arg, (number)) and $has-items-per-column == true {
            $has-template-columns: true;
            $template-columns: $cur-arg;
            $valid-arguement: true;

            @if $debug {
              @debug unquote('Is valid arguement: #{$valid-arguement}');
              @debug unquote('---');
            }
          }
        }

        @debug css-property($has-items-per-column, $items-per-column), css-property($has-element-type, $element-type), css-property($has-template-columns, $template-columns);

        // @include calculate-simple-grid(css-property($has-items-per-column, $items-per-column), css-property($has-element-type, $element-type), css-property($has-template-columns, $template-columns));

        // @debug 'non list ';
      }
    }
  }

  // $item-per-column: 4, $element-type: '*', $template-columns: 12;

  //   @if type-of($template-columns) == 'number' and type-of($item-per-column) == 'number' and $item-per-column != 0 {
  //     @if ($template-columns >= $item-per-column) {
  //       $items-per-column-calculated: math.round(math.div($template-columns, $item-per-column));
  //       display: grid;

  //       grid-template-columns: repeat($template-columns, 1fr);
  //       grid-auto-flow: dense;

  //       @content;

  //       > #{$element-type} {
  //         grid-column: span $items-per-column-calculated;
  //       }
  //     } @else {
  //       @error unquote('Grid $template-columns (#{$template-columns}) cannot be smaller than $items-per-column (#{$item-per-column})');
  //     }
  //   } @else {
  //     @error unquote('Grid $template-columns and $items-per-column must be type of number');
  //   }
}

@mixin calculate-simple-grid($item-per-column: 4, $element-type: '*', $template-columns: 12) {
  @if type-of($template-columns) == 'number' and type-of($item-per-column) == 'number' and $item-per-column != 0 {
    @if ($template-columns >= $item-per-column) {
      $items-per-column-calculated: math.round(math.div($template-columns, $item-per-column));
      display: grid;

      grid-template-columns: repeat($template-columns, 1fr);
      grid-auto-flow: dense;

      @content;

      > #{$element-type} {
        grid-column: span $items-per-column-calculated;
      }
    } @else {
      @error unquote('Grid $template-columns (#{$template-columns}) cannot be smaller than $items-per-column (#{$item-per-column})');
    }
  } @else {
    @error unquote('Grid $template-columns and $items-per-column must be type of number');
  }
}
