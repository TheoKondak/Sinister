// @use '../../../../../sin.config' as *;
@use 'sass:string';
@use 'sass:math';
@use 'sass:list';
@use '../functions/private' as *;
@use '../misc/css-properties' as *;

/// Create a simple css grid with a fixed number of columns
/// @group grid
/// @ignore @author Theodoros Kondakos
/// @param  {number}  $item-per-column [4] - The number of columns of the grid
/// @param  {string}  $element-type [*] - The number of columns of the grid
/// @param  {number}  $template-columns [12] - Breakpoint will work up to `$max`
/// @content
/// @example scss A layout with three columns
///   .grid-example{
///     @include simple-grid(3){
///       background-color: purple;
///       padding: 1rem;
///     }
///   }
/// @example scss A layout with three columns
///   .grid-example{
///     @include simple-grid(3, ".grid-example-item"){
///       background-color: purple;
///       padding: 1rem;
///     }
///   }
///
@mixin simple-grid($args...) {
  @if type($args, 'arglist') and length($args) >= 1 {
    $debug: false;

    // Loop for debug only if it is present in the arguements
    @each $arg in $args {
      @if $arg == 'debug' {
        $debug: true;
      }
    }

    @if $debug {
      @debug '======';
      @debug 'STARTING @mixin simple-grid DEBUGGING';
      @debug '---';
    }

    @each $arg in $args {
      // If debug is an arguement, enable debugging

      $valid-arguement: false;
      $is-list-of-arguements: false;
      $has-valid-breakpoint: false;
      $breakpoint: null;
      $has-items-per-column: false;
      $items-per-column: null;
      $has-element-type: false;
      $element-type: '*';
      $has-template-columns: false;
      $template-columns: 12;

      @if type($arg, (list)) {
        @if $debug {
          @debug unquote('Arguement list \##{calc(index($args, $arg) - 1)}');
        }
        @each $cur-arg in $arg {
          // Reinitialize in every itteration

          @if contains(get(breakpoints), $cur-arg) {
            $has-valid-breakpoint: true;
            $breakpoint: $cur-arg;
            $valid-arguement: true;

            @if $debug {
              @debug unquote('$breakpoint: #{$breakpoint}');
            }
          }

          // Calculate $template-columns
          // This must be before $has-items-per-column check, otherwise, $template-columns will be overwritten
          @if type($cur-arg, (number)) and $has-items-per-column == true {
            $has-template-columns: true;
            $template-columns: $cur-arg;
            $valid-arguement: true;

            @if $debug {
              @debug unquote('$template-columns: #{$template-columns}');
            }
          }

          // Calculate $items-per-column
          @if type($cur-arg, (number)) and $has-items-per-column == false {
            $has-items-per-column: true;
            $items-per-column: $cur-arg;
            $valid-arguement: true;

            @if $debug {
              @debug unquote('$items-per-column: #{$items-per-column}');
            }
          }
        }
        @if $debug {
          @debug '---';
        }
      } @else if type($arg, (number, string)) {
        // Calculate element type.
        @if type($arg, (string)) and $arg != 'debug' and not contains(get(breakpoints), $arg) {
          @if $debug {
            @debug unquote('Arguement \##{calc(index($args, $arg) - 1)}');
          }
          $has-element-type: true;
          $element-type: $arg;
          $valid-arguement: true;

          @if $debug {
            @debug unquote('$element-type: #{$element-type}');
            @debug '---';
          }
        }
      }

      // @debug $breakpoint;
      // @debug $items-per-column;
      // @debug $element-type;
      // @debug $template-columns;
      // @debug '-';

      @if $has-valid-breakpoint {
        // @include calculate-simple-grid($items-per-column, $element-type, $template-columns);
      } @else {
        // @include calculate-simple-grid($items-per-column, $element-type, $template-columns);
      }
    }

    // @if not $is-list-of-arguements {
    //   // @debug unquote('$has-items-per-column: #{$items-per-column}');
    //   // @debug unquote('$element-type: #{$element-type}');
    //   // @debug unquote('$has-template-columns:  #{$template-columns}');
    //   @include calculate-simple-grid($items-per-column, $element-type, $template-columns);
    // }
  }
}

@mixin calculate-simple-grid($items-per-column: 4, $element-type: '*', $template-columns: 12) {
  @if type-of($template-columns) == 'number' and type-of($items-per-column) == 'number' and $items-per-column != 0 {
    @if ($template-columns >= $items-per-column) {
      $items-per-column-calculated: math.round(math.div($template-columns, $items-per-column));
      display: grid;

      grid-template-columns: repeat($template-columns, 1fr);
      grid-auto-flow: dense;

      @if not type($element-type, (null)) {
        // @debug 'not null';
      }

      > #{$element-type} {
        grid-column: span $items-per-column-calculated;
      }
    } @else {
      @error unquote('Grid $template-columns (#{$template-columns}) cannot be smaller than $items-per-column (#{$items-per-column})');
    }
  } @else {
    @error unquote('Grid $template-columns (#{type-of($template-columns)}) and $items-per-column (#{type-of($items-per-column)}) must be type of number');
  }
}
