@use 'sass:map';
@use 'sass:string';
@use 'sass:list';
@use '../../../../../sin.config' as *;
@use './../functions' as *;
@use '../misc/css-properties' as *;

///
/// @author Theodoros Kondakos
/// @link   https://github.com/TheoKondak
///

/// Setting up some data required by the classes and the mixins
/// @parameter {map} getMap($css-properties, spacing, spacing-properties) - Properties that have to do with spacing like margin, padding and gap.
/// @parameter {map} getMap($css-properties, spacing, spacing-direction)- Directions that a spacing property can have.
/// @parameter {map} $spacingDirections - A list of possible directions for each spacing property. That is required because of gap property.
///

/// Generate spacing related parameters
/// @parameter {bool} compile-spacing-classes - Sinister configuration property, if true will generate spacing classes.
///

@if getMap($configuration, generate-classes, 'spacing') {
  @each $spacingKey, $spacingVal in get(spacing) {
    @if type-of($spacingKey) == 'number' or type-of($spacingKey) == 'string' {
      @if type-of($spacingVal) == 'number' {
        @each $propertyKey, $propertyValue in getMap($css-properties, spacing, spacing-properties) {
          @each $directionKey, $directionValue in getMap($css-properties, spacing, spacing-direction) {
            // X-AXIS
            @if $directionKey == 'x-axis' {
              $className: #{$propertyValue}#{$directionValue};
              .#{$className}-#{$spacingKey} {
                // MARGIN
                @if $propertyValue == 'm' {
                  margin-top: $spacingVal !important;
                  margin-bottom: $spacingVal !important;
                }
                // PADDING
                @else if $propertyValue == 'p' {
                  padding-top: $spacingVal !important;
                  padding-bottom: $spacingVal !important;
                }
                // GAP
                @else if $propertyValue == 'g' {
                  // Fallback for older browsers
                  @supports not (gap: 2rem) {
                    margin-left: $spacingVal !important;
                    margin-right: $spacingVal !important;
                  }
                  row-gap: $spacingVal !important;
                }
                // @else {
                //   @warn string.unquote( 'Unknown Property Value. It seems that you have added a new "getMap($css-properties, spacing, spacing-properties)" item without defining the logic') #{getMap($css-properties, spacing, spacing-properties)};
                // }
              }
            }
            // Y-AXIS
            @else if $directionKey == 'y-axis' {
              $className: #{$propertyValue}#{$directionValue};

              .#{$className}-#{$spacingKey} {
                // MARGIN
                @if $propertyValue == 'm' {
                  margin-top: $spacingVal !important;
                  margin-bottom: $spacingVal !important;
                }
                // PADDING
                @else if $propertyValue == 'p' {
                  padding-top: $spacingVal !important;
                  padding-bottom: $spacingVal !important;
                }
                // GAP
                @else if $propertyValue == 'g' {
                  // Fallback for older browsers
                  @supports not (gap: 2rem) {
                    margin-top: $spacingVal !important;
                    margin-bottom: $spacingVal !important;
                  }
                  column-gap: $spacingVal !important;
                }
                // @else {
                //   @warn string.unquote('Unknown Property Value. It seems that you have added a new "getMap($css-properties, spacing, spacing-properties)" item without defining the logic') #{getMap($css-properties, spacing, spacing-properties)};
                // }
              }
            }
            // ALL DIRECTIONS
            @else if $directionKey == 'generic' {
              $className: #{$propertyValue}#{$directionValue};

              .#{$className}-#{$spacingKey} {
                // MARGIN
                @if $propertyValue == 'm' {
                  margin-top: $spacingVal !important;
                  margin-right: $spacingVal !important;
                  margin-bottom: $spacingVal !important;
                  margin-left: $spacingVal !important;
                }
                // PADDING
                @else if $propertyValue == 'p' {
                  padding-top: $spacingVal !important;
                  padding-right: $spacingVal !important;
                  padding-bottom: $spacingVal !important;
                  padding-left: $spacingVal !important;
                }
                // GAP
                @else if $propertyValue == 'g' {
                  // Fallback for older browsers
                  @supports not (gap: 2rem) {
                    margin: $spacingVal !important;
                  }
                  gap: $spacingVal !important;
                }
                // @else {
                //   @warn string.unquote( 'Unknown Property Value. It seems that you have added a new "getMap($css-properties, spacing, spacing-properties)" item without defining the logic') #{getMap($css-properties, spacing, spacing-properties)};
                // }
              }
            }

            // DIRECTION TOP
            @else if $directionKey == 'top' {
              $className: #{$propertyValue}#{$directionValue};
              .#{$className}-#{$spacingKey} {
                // MARGIN
                @if $propertyValue == 'm' {
                  margin-top: $spacingVal !important;
                }
                // PADDING
                @else if $propertyValue == 'p' {
                  padding-top: $spacingVal !important;
                }
                // GAP
                @else if $propertyValue == 'g' {
                  //gap does not support single direction
                }
                //  @else {
                //   @warn string.unquote( 'Unknown Property Value. It seems that you have added a new getMap($css-properties, spacing, spacing-properties) item without defining the logic');
                // }
              }
            }
            // DIRECTION RIGHT
            @else if $directionKey == 'right' {
              $className: #{$propertyValue}#{$directionValue};
              .#{$className}-#{$spacingKey} {
                // MARGIN
                @if $propertyValue == 'm' {
                  margin-right: $spacingVal !important;
                }
                // PADDING
                @else if $propertyValue == 'p' {
                  padding-right: $spacingVal !important;
                }
                // GAP
                @else if $propertyValue == 'g' {
                  //gap does not support single direction
                }
                //  @else {
                //   @warn string.unquote( 'Unknown Property Value. It seems that you have added a new getMap($css-properties, spacing, spacing-properties) item without defining the logic');
                // }
              }
            }
            // DIRECTION BOTTOM
            @else if $directionKey == 'bottom' {
              $className: #{$propertyValue}#{$directionValue};
              .#{$className}-#{$spacingKey} {
                // MARGIN
                @if $propertyValue == 'm' {
                  margin-bottom: $spacingVal !important;
                }
                // PADDING
                @else if $propertyValue == 'p' {
                  padding-bottom: $spacingVal !important;
                }
                // GAP
                @else if $propertyValue == 'g' {
                  //gap does not support single direction
                }
                // @else {
                //   @warn string.unquote( 'Unknown Property Value. It seems that you have added a new getMap($css-properties, spacing, spacing-properties) item without defining the logic');
                // }
              }
            }

            // DIRECTION LEFT
            @else if $directionKey == 'left' {
              $className: #{$propertyValue}#{$directionValue};
              .#{$className}-#{$spacingKey} {
                // MARGIN
                @if $propertyValue == 'm' {
                  margin-left: $spacingVal !important;
                }
                // PADDING
                @else if $propertyValue == 'p' {
                  padding-left: $spacingVal !important;
                }
                // GAP
                @else if $propertyValue == 'g' {
                }
                // @else {
                //   @warn string.unquote( 'Unknown Property Value. It seems that you have added a new getMap($css-properties, spacing, spacing-properties) item without defining the logic');
                // }
              }
            }
          }
        }
      }
      // @else {
      //   @warn string.unquote( '$spacing values must be type of number but there are some of type:') #{type-of($spacingVal)};
      // }
    } @else {
      @warn string.unquote( '$spacing keys must be type of number or string but there are some of type:') #{type-of($spacingKey)};
    }
  }
}

/// Setting up some data required by the classes and the mixins
/// @parameter {string} $breakpoint - A breakpoint from breakpoints in Sinister configuration.
/// @parameter {string} $property - The first letter of a spacing property, m for margin, p for padding, g for gap.
/// @parameter {string} $direction - The first letter of a spacing property direction. For margin and padding, t for top, r for right, b for bottom, l for left. Gap property has only generic, column and gap, so if any of t,b is selected row-gap will be applied and similar for column-gap.
/// @parameter {string} $value - A spacing value from spacing in Sinister configuration
/// @parameter {number} $scale - A number that will be multiplied with the spacing value selected. Tuning this is not suggested. Default value is 1.
///

//Beta Spacing
@mixin spacing($args...) {
  $breakpoint: null;
  $property: null;
  $direction: g;
  $value: 0;
  $scale: 1;

  // Check that there are arguements
  @if (length($args) > 0) {
    // For each arguement
    @each $arg in $args {
      // Check if the list contains a breakpoint.
      @if contains(get(breakpoints), list.nth($arg, 1)) {
        // If true, update variables
        $breakpoint: list.nth($arg, 1);
        $property: list.nth($arg, 2);
        $direction: list.nth($arg, 3);
        $value: list.nth($arg, 4);

        // If there is a scale arguement it should be in final position.
        @if length($arg) == 4 {
          $scale: 1;
        } @else {
          @if (type-of(list.nth($arg, length($arg))) == 'number') {
            $scale: list.nth($arg, length($arg));
          } @else {
            @warn unquote('Scale must be a type of number. Instead provided:') type-of(list.nth($arg, length($arg)));
          }
        }

        @media (min-width: get(breakpoints, $breakpoint)) {
          // Check if property exists in spacingProeprties Map
          @if (contains(getMap($css-properties, spacing, spacing-properties), $property) and contains(get(spacing), $value)) {
            @if (contains(getMap($css-properties, spacing, spacing-direction), $direction)) {
              // Check if property is gap, if yes, then we only have x, y axis.
              @if $property == g {
                @if $direction == 't' or $direction == 'b' or $direction == 'y' {
                  row-gap: calc(#{get(spacing, $value)} * #{$scale});
                } @else if $direction == 'l' or $direction == 'r' or $direction == 'x' {
                  column-gap: calc(#{get(spacing, $value)} * #{$scale});
                } @else if $direction == 'g' {
                  gap: calc(#{get(spacing, $value)} * #{$scale});
                } @else {
                  @warn 'Invalid spacing arguements';
                }
              } @else {
                @each $currentDirection in map-get(getMap($css-properties, spacing, spacing-directions), $direction) {
                  @if $value == 'auto' or $value == 'inherit' {
                    #{getMap(getMap($css-properties, spacing, spacing-properties), $property)}-#{$currentDirection}: #{get(spacing, $value)};
                  } @else {
                    #{getMap(getMap($css-properties, spacing, spacing-properties), $property)}-#{$currentDirection}: calc(#{get(spacing, $value)} * #{$scale});
                  }
                }
              }
            }
          } @else {
            @warn 'Wrong spacing mixin property.';
            @debug 'Available spacings $values';
            @each $spacingKey, $spacingProperty in getMap($css-properties, spacing, spacing-properties) {
              @debug ' #{$spacingKey}: #{$spacingProperty}';
            }
          }
        }

        // Else check if it's contained in spacin properties
      } @else if (contains(getMap($css-properties, spacing, spacing-properties), list.nth($arg, 1))) {
        // check if it is a spacing property
        // If true update variables
        $property: list.nth($arg, 1);
        $direction: list.nth($arg, 2);
        $value: list.nth($arg, 3);

        // If there is a scale arguement it should be in final position.
        @if length($arg) == 3 {
          $scale: 1;
        } @else {
          @if (type-of(list.nth($arg, length($arg))) == 'number') {
            $scale: list.nth($arg, length($arg));
          } @else {
            @warn unquote('Scale must be a type of number. Instead provided:') type-of(list.nth($arg, length($arg)));
          }
        }

        // Check if property exists in $spacingProeprties Map
        @if (contains(getMap($css-properties, spacing, spacing-properties), $property) and contains(get(spacing), $value)) {
          @if (contains(getMap($css-properties, spacing, spacing-direction), $direction)) {
            // Check if property is gap, if yes, then we only have x, y axis.
            @if $property == g {
              @if $direction == 't' or $direction == 'b' or $direction == 'y' {
                row-gap: calc(#{get(spacing, $value)} * #{$scale});
              } @else if $direction == 'l' or $direction == 'r' or $direction == 'x' {
                column-gap: calc(#{get(spacing, $value)} * #{$scale});
              } @else if $direction == 'g' {
                gap: calc(#{get(spacing, $value)} * #{$scale});
              } @else {
                @warn 'Invalid spacing arguements';
              }
            } @else {
              @each $currentDirection in map-get(getMap($css-properties, spacing, spacing-directions), $direction) {
                @if $value == 'auto' or $value == 'inherit' {
                  #{getMap(getMap($css-properties, spacing, spacing-properties), $property)}-#{$currentDirection}: #{get(spacing, $value)};
                } @else {
                  #{getMap(getMap($css-properties, spacing, spacing-properties), $property)}-#{$currentDirection}: calc(#{get(spacing, $value)} * #{$scale});
                }
              }
            }
          }
        } @else {
          @warn 'Wrong spacing mixin property.';
          @debug 'Available spacings $values';
          @each $spacingKey, $spacingProperty in getMap($css-properties, spacing, spacing-properties) {
            @debug ' #{$spacingKey}: #{$spacingProperty}';
          }
        }
      } @else {
        @error 'Invalid input in spacing mixin. See documentation for more.';
      }
    }
  } @else {
    @debug help($config-map: getMap($css-properties, spacing), $intro-msg: 'Printing available Spacing Properties:');
  }
}
