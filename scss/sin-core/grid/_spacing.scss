@use 'sass:map';
@use 'sass:string';
@use 'sass:list';
@use '../../../../../scss/sin.config' as *;
@use './../modules' as *;

//⚔️⚰️⚰️⚰️⚰️⚰️⚰️⚰️⚔️
//  MARGINS | PADDINGS | GAP
//⚔️⚰️⚰️⚰️⚰️⚰️⚰️⚰️⚔️

$spacingProperties: (
  margin: m,
  padding: p,
  gap: g,
);

$spacingDirection: (
  generic: 'g',
  top: 't',
  right: 'r',
  bottom: 'b',
  left: 'l',
  x-axis: 'x',
  y-axis: 'y',
);

$spacingDirections: (
  g: (
    top,
    right,
    bottom,
    left,
  ),
  x: (
    top,
    bottom,
  ),
  y: (
    left,
    right,
  ),
  t: (
    top,
  ),
  r: (
    right,
  ),
  b: (
    bottom,
  ),
  l: (
    left,
  ),
);

// Create Classes

@if get(compile-spacing-classes) {
  @each $spacingKey, $spacingVal in get(spacing) {
    @if type-of($spacingKey) == 'number' or type-of($spacingKey) == 'string' {
      @if type-of($spacingVal) == 'number' {
        @each $propertyKey, $propertyValue in $spacingProperties {
          @each $directionKey, $directionValue in $spacingDirection {
            // X-AXIS
            @if $directionKey == 'x-axis' {
              $className: #{$propertyValue}#{$directionValue};
              .#{$className}-#{$spacingKey} {
                // MARGIN
                @if $propertyValue == 'm' {
                  margin-top: $spacingVal !important;
                  margin-bottom: $spacingVal !important;
                }
                // PADDING
                @else if $propertyValue == 'p' {
                  padding-top: $spacingVal !important;
                  padding-bottom: $spacingVal !important;
                }
                // GAP
                @else if $propertyValue == 'g' {
                  // Fallback for older browsers
                  @supports not (gap: 2rem) {
                    margin-left: $spacingVal !important;
                    margin-right: $spacingVal !important;
                  }
                  row-gap: $spacingVal !important;
                } @else {
                  @warn string.unquote( 'Unknown Property Value. It seems that you have added a new "$spacingProperties" item without defining the logic') #{$spacingProperties};
                }
              }
            }
            // Y-AXIS
            @else if $directionKey == 'y-axis' {
              $className: #{$propertyValue}#{$directionValue};

              .#{$className}-#{$spacingKey} {
                // MARGIN
                @if $propertyValue == 'm' {
                  margin-top: $spacingVal !important;
                  margin-bottom: $spacingVal !important;
                }
                // PADDING
                @else if $propertyValue == 'p' {
                  padding-top: $spacingVal !important;
                  padding-bottom: $spacingVal !important;
                }
                // GAP
                @else if $propertyValue == 'g' {
                  // Fallback for older browsers
                  @supports not (gap: 2rem) {
                    margin-top: $spacingVal !important;
                    margin-bottom: $spacingVal !important;
                  }
                  column-gap: $spacingVal !important;
                } @else {
                  @warn string.unquote('Unknown Property Value. It seems that you have added a new "$spacingProperties" item without defining the logic') #{$spacingProperties};
                }
              }
            }
            // ALL DIRECTIONS
            @else if $directionKey == 'generic' {
              $className: #{$propertyValue}#{$directionValue};

              .#{$className}-#{$spacingKey} {
                // MARGIN
                @if $propertyValue == 'm' {
                  margin-top: $spacingVal !important;
                  margin-right: $spacingVal !important;
                  margin-bottom: $spacingVal !important;
                  margin-left: $spacingVal !important;
                }
                // PADDING
                @else if $propertyValue == 'p' {
                  padding-top: $spacingVal !important;
                  padding-right: $spacingVal !important;
                  padding-bottom: $spacingVal !important;
                  padding-left: $spacingVal !important;
                }
                // GAP
                @else if $propertyValue == 'g' {
                  // Fallback for older browsers
                  @supports not (gap: 2rem) {
                    margin: $spacingVal !important;
                  }
                  gap: $spacingVal !important;
                } @else {
                  @warn string.unquote( 'Unknown Property Value. It seems that you have added a new "$spacingProperties" item without defining the logic') #{$spacingProperties};
                }
              }
            }

            // DIRECTION TOP
            @else if $directionKey == 'top' {
              $className: #{$propertyValue}#{$directionValue};
              .#{$className}-#{$spacingKey} {
                // MARGIN
                @if $propertyValue == 'm' {
                  margin-top: $spacingVal !important;
                }
                // PADDING
                @else if $propertyValue == 'p' {
                  padding-top: $spacingVal !important;
                }
                // GAP
                @else if $propertyValue == 'g' {
                  //gap does not support single direction
                } @else {
                  @warn string.unquote( 'Unknown Property Value. It seems that you have added a new $spacingProperties item without defining the logic');
                }
              }
            }
            // DIRECTION RIGHT
            @else if $directionKey == 'right' {
              $className: #{$propertyValue}#{$directionValue};
              .#{$className}-#{$spacingKey} {
                // MARGIN
                @if $propertyValue == 'm' {
                  margin-right: $spacingVal !important;
                }
                // PADDING
                @else if $propertyValue == 'p' {
                  padding-right: $spacingVal !important;
                }
                // GAP
                @else if $propertyValue == 'g' {
                  //gap does not support single direction
                } @else {
                  @warn string.unquote( 'Unknown Property Value. It seems that you have added a new $spacingProperties item without defining the logic');
                }
              }
            }
            // DIRECTION BOTTOM
            @else if $directionKey == 'bottom' {
              $className: #{$propertyValue}#{$directionValue};
              .#{$className}-#{$spacingKey} {
                // MARGIN
                @if $propertyValue == 'm' {
                  margin-bottom: $spacingVal !important;
                }
                // PADDING
                @else if $propertyValue == 'p' {
                  padding-bottom: $spacingVal !important;
                }
                // GAP
                @else if $propertyValue == 'g' {
                  //gap does not support single direction
                } @else {
                  @warn string.unquote( 'Unknown Property Value. It seems that you have added a new $spacingProperties item without defining the logic');
                }
              }
            }

            // DIRECTION LEFT
            @else if $directionKey == 'left' {
              $className: #{$propertyValue}#{$directionValue};
              .#{$className}-#{$spacingKey} {
                // MARGIN
                @if $propertyValue == 'm' {
                  margin-left: $spacingVal !important;
                }
                // PADDING
                @else if $propertyValue == 'p' {
                  padding-left: $spacingVal !important;
                }
                // GAP
                @else if $propertyValue == 'g' {
                } @else {
                  @warn string.unquote( 'Unknown Property Value. It seems that you have added a new $spacingProperties item without defining the logic');
                }
              }
            }
          }
        }
      } @else {
        @warn string.unquote( '$spacing values must be type of number but there are some of type:') #{type-of($spacingVal)};
      }
    } @else {
      @warn string.unquote( '$spacing keys must be type of number or string but there are some of type:') #{type-of($spacingKey)};
    }
  }
}

@function case($map, $value) {
  @return map-get($map, $value);
}

//⚔️⚰️⚰️⚰️⚰️⚰️⚰️⚰️⚔️
//  MIXIN
//⚔️⚰️⚰️⚰️⚰️⚰️⚰️⚰️⚔️
$key: '';

//Beta Spacing
@mixin spacing($args...) {
  $breakpoint: null;
  $property: null;
  $direction: g;
  $value: 0;
  $scale: 1;

  // Check that there are arguements
  @if (length($args) > 0) {
    @each $arg in $args {
      // Check if the list contains a breakpoint.
      @if contains(get(breakpoints), list.nth($arg, 1)) {
        // If true, update variables
        $breakpoint: list.nth($arg, 1);
        $property: list.nth($arg, 2);
        $direction: list.nth($arg, 3);
        $value: list.nth($arg, 4);
        $scale: list.nth($arg, 5);

        @media (min-width: get(breakpoints, $breakpoint)) {
          // Check if property exists in spacingProeprties Map
          @if contains($spacingProperties, $property) {
            @if (contains($spacingDirection, $direction) and contains(get(spacing), $value)) {
              // Check if property is gap, if yes, then we only have x, y axis.
              @if $property == g {
                @if $direction == 't' or $direction == 'b' {
                  row-gap: calc(#{get(spacing, $value)} * #{$scale});
                } @else if $direction == 'l' or $direction == 'r' {
                  column-gap: calc(#{get(spacing, $value)} * #{$scale});
                } @else if $direction == 'g' {
                  gap: calc(#{get(spacing, $value)} * #{$scale});
                } @else {
                  @warn 'Invalid spacing arguements';
                }
              } @else {
                @each $currentDirection in map-get($spacingDirections, $direction) {
                  #{contains($spacingProperties, $property)}-#{$currentDirection}: calc(#{get(spacing, $value)} * #{$scale});
                }
              }
            }
          } @else {
            @warn 'Wrong spacing mixin property.';
            @debug 'Available spacings $values';
            @each $spacingKey, $spacingProperty in $spacingProperties {
              @debug ' #{$spacingKey}: #{$spacingProperty}';
            }
          }
        }
      } @else if (contains($spacingProperties, list.nth($arg, 1))) {
        // check if it is a spacing property
        // If true update variables
        $property: list.nth($arg, 1);
        $direction: list.nth($arg, 2);
        $value: list.nth($arg, 3);
        $scale: list.nth($arg, 4);
        // @debug 'does not contain breakpoint';

        // Check if property exists in spacingProeprties Map
        @if contains($spacingProperties, $property) {
          @if (contains($spacingDirection, $direction) and contains(get(spacing), $value)) {
            // Check if property is gap, if yes, then we only have x, y axis.
            @if $property == g {
              @if $direction == 't' or $direction == 'b' {
                row-gap: calc(#{get(spacing, $value)} * #{$scale});
              } @else if $direction == 'l' or $direction == 'r' {
                column-gap: calc(#{get(spacing, $value)} * #{$scale});
              } @else if $direction == 'g' {
                gap: calc(#{get(spacing, $value)} * #{$scale});
              } @else {
                @warn 'Invalid spacing arguements';
              }
            } @else {
              @each $currentDirection in map-get($spacingDirections, $direction) {
                #{contains($spacingProperties, $property)}-#{$currentDirection}: calc(#{get(spacing, $value)} * #{$scale});
              }
            }
          }
        } @else {
          @warn 'Wrong spacing mixin property.';
          @debug 'Available spacings $values';
          @each $spacingKey, $spacingProperty in $spacingProperties {
            @debug ' #{$spacingKey}: #{$spacingProperty}';
          }
        }
      } @else {
        @error 'Invalid input in spacing mixin. See documentation for more.';
      }
    }
  } @else {
    @warn "Spacing mixin called without arguements.";
  }
}
