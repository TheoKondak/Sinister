@use 'sass:map';
@use 'sass:string';
@use 'sass:list';
@use '../../../../../sin.config' as *;
@use './../functions' as *;
@use '../misc/css-properties' as *;
@use '../mixins/private/' as *;
@use '../grid/responsive' as *;

@mixin css-property-line-with-scale($property: $property, $current-direction: $current-direction, $value: $value, $is-important: $is-important, $scale: $scale, $debug: false) {
  @if $debug {
    @debug '@mixin css-property-line-with-scale calculating rule';
    @debug unquote('Property: #{$property}');
    @debug unquote('Current Direction: #{$current-direction}');
    @debug unquote('Value: #{$value}');
    @debug unquote('Is Important: #{$is-important}');
    @debug unquote('Scale: #{$scale}');
  }

  // Handle Gap exception
  @if $property == 'g' {
    #{$current-direction}: calc(#{$value} * #{$scale}) #{css-property($is-important, '!important')};
  } @else {
    #{getMap(getMap($css-properties, spacing, spacing-properties), $property)}-#{$current-direction}: calc(#{$value} * #{$scale}) #{css-property($is-important, '!important')};
  }
}

/// The `spacing` mixin allows you to add consistent spacing using values form `_sin.config` or the `default-configuration`.
/// @group experimental
/// @parameter {string} $debug - If the first parameter of an arguement list is 'debug' then a debug log will be printed for the specific arguement list. If its the first arguement of spacing mixin, then it will print debug log of all lists
/// @parameter {string} $breakpoint - A breakpoint from breakpoints in Sinister configuration.
/// @parameter {string} $property - The first letter of a spacing property, m for margin, p for padding, g for gap.
/// @parameter {string} $direction - The first letter of a spacing property direction. For margin and padding, t for top, r for right, b for bottom, l for left. Gap property has only generic, column and gap, so if any of t,b is selected row-gap will be applied and similar for column-gap.
/// @parameter {string} $value - A spacing value from spacing in Sinister configuration
/// @parameter {number} $scale - A number that will be multiplied with the spacing value selected. Tuning this is not suggested. Default value is 1.
/// @parameter {string} $important - If `!i` is present, the style will get `!important`
/// @parameter {string} $debug - You can enable debug by adding a `debug` string in the arguements
/// @link https://utopia.fyi/space/calculator
/// @example scss See available properties and values
/// .sin{
///   @debug spacing();
/// }
/// @example scss Common use case
/// .sin{
///  @include spacing(
///   (m, g, 1), // Margin, general (all directions), distance 1 (from sinister configuration)
///   (xs, m, g, 2), // From breakpoint xs from sinister configuration, direction general, distance 2
///   (md, p, y, 2, 1.4) // From breakpoint md, padding, y axis, distance 2, and scale 1.4
///   (lg, m, x, auto) // From breakpoint lg, x axis, margin auto
///   (xl, m, t, 2, '!i') // From breakpoint xl, direction top, distance 2, !important is true, scale is default
///  );
/// }
/// @example scss Common use case
/// .sin{
///  @include spacing(
///   debug, // Will print debug log for both list items
///   (m, g, 1),
///   (xs, m, g, 2),
///  );
/// }
/// @example scss Common use case
/// .sin{
///  @include spacing(
///   (debug, m, g, 1),  // Will print debug log for this item
///   (xs, m, g, 2rem), // From xs breakpoint, margin general 2rem
///   (g, t, 2) // property gap, direction is top, but gap works on x and y axis so in that case top is translated to top and bottom, or y axis
///  );
/// }

@mixin spacing-beta($args...) {
  // Check that there are arguements
  @if (length($args) > 0) {
    // For each arguement
    $debug: false;
    @each $arg in $args {
      $breakpoint: null;
      $property: null;
      $direction: null;
      $value: 0;
      $scale: 1;

      $is-important: false;
      $valid-breakpoint: false;
      $valid-direction: false;
      $valid-property: false;
      $valic-css-value: false; // To check if the input is a margin value with units ex `2rem` or a sin config value ex `2`
      $valid-distance: false;
      $has-scale: false;

      @if $arg == 'debug' {
        $debug: true;
        @debug '======';
        @debug 'STARTING @mixin spacing DEBUGGING for all lists';
        @debug '---';
      }

      // Check if important is present
      @each $prop in $arg {
        // Check if Debug Is enabled

        @if $prop == 'debug' {
          $debug: true;
          @debug '======';
          @debug 'STARTING @mixin spacing() DEBUGGING';
          @debug '---';
        }

        // Check if there is a spacing distance which is a number, and a scale. if there are two similar numbers, and one of the numbers belongs to sinister configuration, then consider this number as scale as well
        @if is-number($prop) {
          @if $debug {
            @debug unquote('Current Arguement is a number');
          }

          // Check if it is unitless (otherwise it could be a config value or css value)
          @if not unitless($prop) {
            $valic-css-value: true;
            $valid-distance: true;
            $value: $prop;

            @if $debug {
              @debug unquote('Arguement is a valid spacing distance from _sin.config.scss | Value: #{$value}');
              @debug '---';
            }
            // Check if is a distance, number that is contained in _sin.config.scss
          } @else if contains(get(spacing), $prop) {
            $valid-distance: true;

            $value: get(spacing, $prop);

            @if $debug {
              @debug unquote('Arguement is a css spacing distance (number with unit ex 2rem) | Value: #{$value}');
              @debug '---';
            }
          }

          // If is a number, but does not exist in _sin.config.scss and is a unitless number
          @if not contains(get(spacing), $prop) and unitless($prop) {
            $has-scale: true;
            $scale: $prop;

            @if $debug {
              @debug unquote('Arguement is a scale arguement | Value: #{$scale}');
              @debug '---';
            }
          }
          // Check if spacing property is a global spacing value (auto, inherit etc)
        } @else if map-get(getMap($css-properties, spacing, global-spacing-values), $prop) != null {
          $valid-distance: true;
          $value: $prop;

          @if $debug {
            @debug unquote('Arguement is a global spacing value | Value: #{$value}');
            @debug '---';
          }
        }

        // If has Important
        @if $prop == '!i' {
          $is-important: true;

          @if $debug {
            @debug unquote('Is Important | Value: #{$is-important}');
            @debug '---';
          }
        }

        // Valid Breakpoint
        @if contains(get(breakpoints), $prop) {
          $valid-breakpoint: true;
          $breakpoint: $prop;
          @if $debug {
            @debug unquote('The arguement is a valid breakpoint | Value: #{$breakpoint}');
            @debug '---';
          }
        }

        // Direction
        @if (contains(getMap($css-properties, spacing, spacing-direction), $prop)) and $valid-direction == false and $valid-property == true {
          $valid-direction: true;
          // If the spacing property is gap

          @if $property == 'g' {
            @if $prop == 't' or $prop == 'b' or $prop == 'y' {
              $direction: row-gap;
            } @else if $prop == 'l' or $prop == 'r' or $prop == 'x' {
              $direction: column-gap;
            } @else if $prop == 'g' {
              $direction: gap;
            }

            @if $debug {
              @debug unquote('The arguement is a valid gap direction arguement | Value: #{$direction}');
              @debug '---';
            }
          } @else {
            // Prep the direction CSS property
            @each $prop in map-get(getMap($css-properties, spacing, spacing-directions), $prop) {
              $direction: append($direction, $prop);
            }
            @if $debug {
              @debug unquote('Valid direction property | Value: #{$direction}');
              @debug '---';
            }
          }
        }

        // Valid Property
        @if contains(getMap($css-properties, spacing, spacing-properties), $prop) and $valid-property == false {
          $valid-property: true;
          $property: $prop;

          @if $debug {
            @debug unquote('Valid Property | Value: #{$property}');
            @debug '---';
          }
        }
      }

      // Create CSS Rules
      @if $valid-property and $valid-direction and $valid-distance {
        // If it has breakpoint
        @if $valid-breakpoint {
          @include mqMin($breakpoint) {
            // If has scale and the value is a number
            @if ($has-scale and type($value, ('number'))) {
              @each $current-direction in $direction {
                // The default value is null, if its not the default value then..
                @if $current-direction != null {
                  @include css-property-line-with-scale($property: $property, $current-direction: $current-direction, $value: $value, $scale: $scale, $is-important: $is-important, $debug: $debug);
                }
              }
            } @else {
              // If it does not have scale

              @each $current-direction in $direction {
                // The default value is null, if its not the default value then..
                @if $current-direction != null {
                  @include css-property-line($property: $property, $current-direction: $current-direction, $value: $value, $is-important: $is-important, $debug: $debug);
                }
              }
            }
          }
        } @else {
          // If it does not have a valid breakpoint
          // @debug unquote('Value: #{$value}');
          // If has scale and the value is a number

          @if $has-scale and type($value, ('number')) {
            // For each direction
            @each $current-direction in $direction {
              // The default value is null, if its not the default value then..
              @if $current-direction != null {
                @include css-property-line-with-scale($property: $property, $current-direction: $current-direction, $value: $value, $scale: $scale, $is-important: $is-important, $debug: $debug);
              }
            }
          } @else if type($value, ('number')) {
            // If its a number but doesn't have scale

            @each $current-direction in $direction {
              // The default value is null, if its not the default value then..
              @if $current-direction != null {
                @include css-property-line($property: $property, $current-direction: $current-direction, $value: $value, $is-important: $is-important, $debug: $debug);
              }
            }
          } @else if map-get(getMap($css-properties, spacing, global-spacing-values), $value) != null {
            // If it is a non numeric value (auto, inherit etc)
            // For each direction
            @each $current-direction in $direction {
              // The default value is null, if its not the default value then..
              @if $current-direction != null {
                @include css-property-line($property: $property, $current-direction: $current-direction, $value: $value, $is-important: $is-important, $debug: $debug);
              }
            }
          } @else {
            @debug getMap($css-properties, spacing, global-spacing-values);
          }
        }
      }

      @if $debug {
        @debug '======';
      }
    }
  } @else {
    @debug help($config-map: getMap($css-properties, spacing), $intro-msg: 'Printing available Spacing Properties:', $msg: 'Documentation: https://theokondak.github.io/Sinister/#grid-mixin-spacing-beta');
    @debug help(spacing, $intro-msg: 'Printing available Spacing values:', $msg: 'Documentation: https://theokondak.github.io/Sinister/#variable-sinister-default-configuration');
    @debug help(breakpoints, $intro-msg: 'Printing available breakpoints:', $msg: 'Documentation: https://theokondak.github.io/Sinister/#variable-sinister-default-configuration');
  }
}
