@use 'sass:list';
@use 'sass:map';
@use 'sass:math';
@use '../functions' as *;
@use './spacing' as *;
@use '../../../../../sin.config' as *;

// NOT LOADING

///
/// @author Theodoros Kondakos
/// @link   https://github.com/TheoKondak
///

$align-items: (
  ai-str: stretch,
  ai-fs: flex-start,
  ai-fe: flex-end,
  ai-c: center,
  ai-bl: baseline,
  ai-fbl: 'first baseline',
  ai-lbl: 'last baseline',
  ai-st: start,
  ai-ed: end,
  ai-sst: self-start,
  ai-sed: self-end,
  ai-sf: safe,
  ai-usf: unsafe,
);

// Flex Parent Element Properties
$align-content: (
  ac-fs: flex-start,
  ac-fe: flex-end,
  ac-c: center,
  ac-sb: space-between,
  ac-sa: space-around,
  ac-se: space-evenly,
  ac-strai-: stretch,
  ac-st: start,
  ac-ed: end,
  ac-bl: baseline,
  ac-fbl: 'first baseline',
  ac-lbl: 'last baseline',
  ac-sf: safe,
  ac-usf: unsafe,
);

$justify-content: (
  jc-fs: flex-start,
  jc-fe: flex-end,
  jc-c: center,
  jc-sb: space-between,
  jc-sa: space-around,
  jc-se: space-evenly,
  jc-st: start,
  jc-ed: end,
  jc-l: left,
  jc-r: right,
  jc-sf: safe,
  jc-usf: unsafe,
);

$flex-direction: (
  fd-r: row,
  fd-cl: column,
  fd-rr: row-reverse,
  fd-clr: column-reverse,
);

$wrap: (
  w-nw: nowrap,
  w-w: wrap,
  w-wr: wrap-reverse,
);

$gap: (
  g: gap,
  rg: row-gap,
  cg: column-gap,
);

// Flex Child Element Proeperties
$child-properties: (
  order: order,
  // Unsupported
  fg: flex-grow,
  fs: flex-shrink,
);

$align-self: (
  au: auto,
  fs: flex-start,
  fe: flex-end,
  c: center,
  bl: baseline,
  str: stretch,
);

// Width
$width: (max-content, min-content, auto, inherit, initial, revert, 'revert-layer', unset);

/// flex-parent
///
/// @param  {number}  $min-width - A minimum width value.
/// @param  {number}  $max-width - A maximum width value.
///

@mixin flex-parent($args...) {
  display: flex;
  // It takes a list of lists
  // Itterate / check first level map
  @if (length($args) > 0) and type($args, 'arglist') {
    @each $sin-arg in $args {
      @if (length($sin-arg) > 0) and type($args, 'arglist') {
        @if contains(get(breakpoints), list.nth($sin-arg, 1)) {
          @media (min-width: get(breakpoints, list.nth($sin-arg,1))) {
            @each $cur-arg in $sin-arg {
              // Flex Direction
              @if contains($flex-direction, $cur-arg) {
                flex-direction: #{map-get($flex-direction, $cur-arg)};
              }

              // Flex Wrap
              @if contains($wrap, $cur-arg) {
                flex-wrap: #{map-get($wrap, $cur-arg)};
              }

              // Justify Content
              @if contains($justify-content, $cur-arg) {
                justify-content: #{map-get($justify-content, $cur-arg)};
              }

              // Align Content
              @if contains($align-content, $cur-arg) {
                align-content: #{map-get($align-content, $cur-arg)};
              }
              // Align Items
              @if contains($align-items, $cur-arg) {
                align-items: #{map-get($align-items, $cur-arg)};
              }

              // Gap
              @if type($cur-arg, (list)) and contains($spacingDirection, list.nth($cur-arg, 1)) {
                @if length($cur-arg) == 2 {
                  @include spacing((g, list.nth($cur-arg, 1), list.nth($cur-arg, 2)));
                } @else if length($cur-arg) == 3 {
                  @include spacing((g, list.nth($cur-arg, 1), list.nth($cur-arg, 2), list.nth($cur-arg, 3)));
                }
              }

              // Flex | Flex Basis
              @if type($cur-arg, (list)) and length($cur-arg) == 3 and type(list.nth($cur-arg, 1), (number)) {
                @if type(list.nth($cur-arg, 2), (number)) {
                  @if math.is-unitless(list.nth($cur-arg, 2)) {
                    @if type(list.nth($cur-arg, 3), (number)) or contains($width, list.nth($cur-arg, 3)) {
                      > * {
                        flex: #{list.nth($cur-arg, 1)} #{list.nth($cur-arg, 2)} calc(#{list.nth($cur-arg, 3)});
                      }
                    }
                  } @else {
                    @warn 'Wrong properties in flex child list. Expected a list of 2 unitless numbers and a flex basis property (0 0 20px) instead received: ' $cur-arg;
                  }
                } @else {
                  @warn unquote('Wrong properties in flex child list. Expected a list of 2 unitless numbers and a flex basis property (0 0 20px). Instead received: ') $cur-arg;
                }
              } @else if length($cur-arg) == 1 {
                @if (type($cur-arg, (number)) and not unitless($cur-arg)) or contains($width, $cur-arg) {
                  > * {
                    flex: #{$cur-arg};
                  }
                }
              }
            }
          }
        } @else {
          @each $cur-arg in $sin-arg {
            // Flex Direction
            @if contains($flex-direction, $cur-arg) {
              flex-direction: #{map-get($flex-direction, $cur-arg)};
            }

            // Flex Wrap
            @if contains($wrap, $cur-arg) {
              flex-wrap: #{map-get($wrap, $cur-arg)};
            }

            // Justify Content
            @if contains($justify-content, $cur-arg) {
              justify-content: #{map-get($justify-content, $cur-arg)};
            }

            // Align Content
            @if contains($align-content, $cur-arg) {
              align-content: #{map-get($align-content, $cur-arg)};
            }

            // Align Items
            @if contains($align-items, $cur-arg) {
              align-items: #{map-get($align-items, $cur-arg)};
            }

            // Gap
            @if type($cur-arg, (list)) and contains($spacingDirection, list.nth($cur-arg, 1)) {
              @if length($cur-arg) == 2 {
                @include spacing((g, list.nth($cur-arg, 1), list.nth($cur-arg, 2)));
              } @else if length($cur-arg) == 3 {
                @include spacing((g, list.nth($cur-arg, 1), list.nth($cur-arg, 2), list.nth($cur-arg, 3)));
              }
            }

            // Flex | Flex Basis
            @if type($cur-arg, (list)) and length($cur-arg) == 3 and type(list.nth($cur-arg, 1), (number)) {
              @if type(list.nth($cur-arg, 2), (number)) {
                @if math.is-unitless(list.nth($cur-arg, 2)) {
                  @if type(list.nth($cur-arg, 3), (number)) or contains($width, list.nth($cur-arg, 3)) {
                    > * {
                      flex: #{list.nth($cur-arg, 1)} #{list.nth($cur-arg, 2)} #{list.nth($cur-arg, 3)};
                    }
                  }
                } @else {
                  @warn 'Wrong properties in flex child list. Expected a list of 2 unitless numbers and a flex basis property (0 0 20px) instead received: ' $cur-arg;
                }
              } @else {
                @warn unquote('Wrong properties in flex child list. Expected a list of 2 unitless numbers and a flex basis property (0 0 20px). Instead received: ') $cur-arg;
              }
            } @else if length($cur-arg) == 1 {
              @if (type($cur-arg, (number)) and not unitless($cur-arg)) or contains($width, $cur-arg) {
                > * {
                  flex: #{$cur-arg};
                }
              }
            }
          }
        }
      }
    }
  }
}
