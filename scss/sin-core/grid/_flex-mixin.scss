@use 'sass:list';
@use 'sass:map';
@use 'sass:math';
@use '../functions' as *;
@use '../misc/css-properties' as *;
@use './spacing' as *;
@use '../../../../../sin.config' as *;

// NOT LOADING

@mixin flex-properties($cur-arg) {
  // Flex Direction
  @if contains(getMap($css-properties, flex, flex-direction), $cur-arg) {
    flex-direction: #{map-get(getMap($css-properties, flex, flex-direction), $cur-arg)};
  }

  // Flex Wrap
  @if contains(getMap($css-properties, flex, wrap), $cur-arg) {
    flex-wrap: #{map-get(getMap($css-properties, flex, wrap), $cur-arg)};
  }

  // Justify Content
  @if contains(getMap($css-properties, flex, justify-content), $cur-arg) {
    justify-content: #{map-get(getMap($css-properties, flex, justify-content), $cur-arg)};
  }

  // Align Content
  @if contains(getMap($css-properties, flex, align-content), $cur-arg) {
    align-content: #{map-get(getMap($css-properties, flex, align-content), $cur-arg)};
  }
  // Align Items
  @if contains(getMap($css-properties, flex, align-items), $cur-arg) {
    align-items: #{map-get(getMap($css-properties, flex, align-items), $cur-arg)};
  }

  // Gap
  @if type($cur-arg, (list)) and contains($spacingDirection, list.nth($cur-arg, 1)) {
    @if length($cur-arg) == 2 {
      @include spacing((g, list.nth($cur-arg, 1), list.nth($cur-arg, 2)));
    } @else if length($cur-arg) == 3 {
      @include spacing((g, list.nth($cur-arg, 1), list.nth($cur-arg, 2), list.nth($cur-arg, 3)));
    }
  }
  // Flex | Flex Basis

  // If its flex property, the list has 3 items, flex-grow, flex-shrink, flex-basis
  @else if type($cur-arg, (list)) and length($cur-arg) == 3 and type(list.nth($cur-arg, 1), (number)) {
    @if type(list.nth($cur-arg, 2), (number)) {
      @if math.is-unitless(list.nth($cur-arg, 2)) {
        @if type(list.nth($cur-arg, 3), (number)) or contains(getMap($css-properties, flex, width), list.nth($cur-arg, 3)) {
          > * {
            flex: #{list.nth($cur-arg, 1)} #{list.nth($cur-arg, 2)} calc(#{list.nth($cur-arg, 3)});
          }
        }
      } @else {
        @warn 'Wrong properties in flex child list. Expected a list of 2 unitless numbers and a flex basis property (0 0 20px) instead received: ' $cur-arg;
      }
    } @else {
      @warn unquote('Wrong properties in flex child list. Expected a list of 2 unitless numbers and a flex basis property (0 0 20px). Instead received: ') $cur-arg;
    }
  }
  // If the list has a single arguement, it is flex-basis
  @else if length($cur-arg) == 1 {
    @if (type($cur-arg, (number)) and not unitless($cur-arg)) or contains(getMap($css-properties, width), $cur-arg) {
      @debug 'single arguement';
      > * {
        flex: #{$cur-arg};
      }
    }
  } @else {
    @warn unquote('Invalid input. Please check the syntax of your list properties. ');
  }
}

///
/// @author Theodoros Kondakos
/// @link   https://github.com/TheoKondak
///

/// flex-parent
///
/// @param  {number}  $min-width - A minimum width value.
/// @param  {number}  $max-width - A maximum width value.
///
@mixin flex($args...) {
  // It takes a list of lists
  // Itterate / check first level map
  @if (length($args) > 0) and type($args, 'arglist') {
    @each $sin-arg in $args {
      @if (length($sin-arg) > 0) and type($args, 'arglist') {
        @if contains(get(breakpoints), list.nth($sin-arg, 1)) {
          @media (min-width: get(breakpoints, list.nth($sin-arg,1))) {
            display: flex;
            @each $cur-arg in $sin-arg {
              // Load All the properties from flex properties mixin
              @include flex-properties($cur-arg);
            }
          }
        } @else {
          display: flex;
          @each $cur-arg in $sin-arg {
            @include flex-properties($cur-arg);
          }
        }
      }
    }
  }
}
