/* functions.spec.scss */
@use '../node_modules/sass-true/sass/true' as true;
@use '../test-sin/scss/sin' as *;

@include true.describe('spacing-beta [mixin]') {
  @include true.it('should return justify-content: center;') {
    @include true.assert {
      @include true.output {
        .test {
          @include spacing-beta((m, g, 1), (xs, m, g, 2));
        }
      }
      @include true.expect {
        .test {
          margin-top: 1.5rem;
          margin-right: 1.5rem;
          margin-bottom: 1.5rem;
          margin-left: 1.5rem;
        }
        @media (min-width: 576px) {
          .test {
            margin-top: 2rem;
            margin-right: 2rem;
            margin-bottom: 2rem;
            margin-left: 2rem;
          }
        }
      }
    }
  }
}

@include true.describe('spacing-beta [mixin]') {
  @include true.it('should return padding-top 1, from xs breakpoint, gap, top (row-gap) 2') {
    @include true.assert {
      @include true.output {
        .test {
          @include spacing-beta((p, t, 1), (xs, g, t, 2));
        }
      }
      @include true.expect {
        .test {
          padding-top: 1.5rem;
        }
        @media (min-width: 576px) {
          .test {
            row-gap: 2rem;
          }
        }
      }
    }
  }
}

@include true.describe('spacing-beta [mixin]') {
  @include true.it('should return padding-top 1, from xs breakpoint gap, top (row-gap), distance 2, scale 0.4') {
    @include true.assert {
      @include true.output {
        .test {
          @include spacing-beta((p, t, 1), (xs, g, t, 2, 0.4));
        }
      }
      @include true.expect {
        .test {
          padding-top: 1.5rem;
        }
        @media (min-width: 576px) {
          .test {
            row-gap: 0.8rem;
          }
        }
      }
    }
  }
}
@include true.describe('spacing-beta [mixin]') {
  @include true.it('should return margin all directions distance 1, from xs, margin all directions, distance 2, from md, padding top, bottom, dist 2, scale 1.4, from lg margin, left right auto, from xl margin top dist 2, important') {
    @include true.assert {
      @include true.output {
        .test {
          @include spacing-beta((m, g, 1), (xs, m, g, 2), (md, p, y, 2, 1.4), (lg, m, x, auto), (xl, m, t, 2, '!i'));
        }
      }
      @include true.expect {
        .test {
          margin-top: 1.5rem;
          margin-right: 1.5rem;
          margin-bottom: 1.5rem;
          margin-left: 1.5rem;
        }
        @media (min-width: 576px) {
          .test {
            margin-top: 2rem;
            margin-right: 2rem;
            margin-bottom: 2rem;
            margin-left: 2rem;
          }
        }
        @media (min-width: 1200px) {
          .test {
            padding-top: 2.8rem;
            padding-bottom: 2.8rem;
          }
        }
        @media (min-width: 1460px) {
          .test {
            margin-left: auto;
            margin-right: auto;
          }
        }
        @media (min-width: 1980px) {
          .test {
            margin-top: 2rem !important;
          }
        }
      }
    }
  }
}

@include true.describe('spacing-beta [mixin]') {
  @include true.it('should return xl screens and above, gap x (column-gap) dist 1, xs screens, gap top (row-gap), dist 2, scale 1.2, md screens and above, gap all directions, dist 3 !important') {
    @include true.assert {
      @include true.output {
        .test {
          @include spacing-beta((xl, g, x, 1), (xs, g, t, 2, 1.2), (md, g, g, 3, '!i'));
        }
      }
      @include true.expect {
        @media (min-width: 1980px) {
          .test {
            column-gap: 1.5rem;
          }
        }
        @media (min-width: 576px) {
          .test {
            row-gap: 2.4rem;
          }
        }
        @media (min-width: 1200px) {
          .test {
            gap: 2.5rem !important;
          }
        }
      }
    }
  }
}
