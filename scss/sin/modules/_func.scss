@use 'sass:string';
@use 'sass:map';
@use 'sass:list';
@use '../../../../../scss/sinConfig' as *;

// Access Data in Deep nested Map
//src: https://css-tricks.com/snippets/sass/deep-getset-maps/

// Map Deep get

// Get values from configuration only, but has shorter syntax.
// Example let's say you want to add some very small padding
// padding: get(spacing, 1);
// Where 1 is a key , this could be

//⚔️⚰️⚰️⚰️⚰️⚰️⚰️⚰️⚔️
// WARNING: MAP DEEP SET IS NOT TESTED AT ALL
//⚔️⚰️⚰️⚰️⚰️⚰️⚰️⚰️⚔️

// Map Deep set
/// Deep set function to set a value in nested maps
/// @author Kitty Giraudel
/// @access public
/// @param {Map} $map - Map
/// @param {List} $keys -  Key chaine
/// @param {*} $value - Value to assign
/// @return {Map}
//

// Similar to get set function sets a value to a map
@function set($map, $keys, $value) {
  $maps: ($map);
  $result: null;

  // If the last key is a map already
  // Warn the user we will be overriding it with $value
  @if type-of(nth($keys, -1)) == 'map' {
    @warn "The last key you specified is a map; it will be overrided with `#{$value}`.";
  }

  // If $keys is a single key
  // Just merge and return
  @if length($keys) == 1 {
    @return map-merge(
      $map,
      (
        $keys: $value,
      )
    );
  }

  // Loop from the first to the second to last key from $keys
  // Store the associated map to this key in the $maps list
  // If the key doesn't exist, throw an error
  @for $i from 1 through length($keys) - 1 {
    $current-key: nth($keys, $i);
    $current-map: nth($maps, -1);
    $current-get: map-get($current-map, $current-key);
    @if $current-get == null {
      @error "Key `#{$key}` doesn't exist at current level in map.";
    }
    $maps: append($maps, $current-get);
  }

  // Loop from the last map to the first one
  // Merge it with the previous one
  @for $i from length($maps) through 1 {
    $current-map: nth($maps, $i);
    $current-key: nth($keys, $i);
    $current-val: if($i == length($maps), $value, $result);
    $result: map-merge(
      $current-map,
      (
        $current-key: $current-val,
      )
    );
  }

  // Return result
  @return $result;
}

// Contains function returns true or false. Checks if a value is present in a list inside sinConfig
@function contains($list, $var) {
  $isTrue: null;
  @each $key, $value in get($list) {
    @if $key == $var {
      $isTrue: true;
    }
  }

  @if $isTrue != true {
    @warn string.unquote('Invalid $var provided in contains function:') #{$var};
  }

  @return $isTrue;
}

@function list-contains($list, $val) {
  $isTrue: false;
  @each $key, $value in $list {
    @if $key == $val or $value == $val {
      $isTrue: true;
    }
  }

  @if $isTrue != true {
    // @warn string.unquote('Invalid $val provided in contains function:') #{$val};
  }

  @return $isTrue;
}

// Return value of a map
@function return-map-key($map, $val) {
  @each $key, $value in $map {
    @if $val == $value {
      @return $key;
    }
  }
}
