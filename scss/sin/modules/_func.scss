@use 'sass:string';
@use 'sass:map';
@use '../../../../../scss/sinConfig' as *;

// Access Data in Deep nested Map
//src: https://css-tricks.com/snippets/sass/deep-getset-maps/

// Map Deep get

// Get values from configuration only, but has shorter syntax.
// Example let's say you want to add some very small padding
// padding: get(spacing, 1);
// Where 1 is a key , this could be

@function get($keys...) {
  $map: $configuration;
  @if $map {
    @if $keys {
      @each $key in $keys {
        @if type-of($keys) == arglist {
          $map: map-get($map, $key);
        } @else {
          @warn string.unquote('Invalid $key property type provided. Expected "arglist" but recieved:') #{type-of($key)};
        }
      }
    } @else {
      @warn string.unquote('Invalid "$keys" provided in contains function:') #{$keys};
    }
  } @else {
    @warn string.unquote('Invalid "$map" provided in contains function:') #{$map};
  }

  @return $map;
}

// Get Values from any map

// Syntax:
//   ...: getMap($map, key, key);

// Where map can be any map,
// Similar to get, only now you have to declare the map. Example:
//  ...: getMap($configuration, spacing, xxl);
// If a value is nested further deep, you can use the syntax bellow.
//  background: getMap($map          , parent   , child, child);
//  background: getMap($configuration, bootstrap, color, bs-success);
// Will return the color set for the specific value pair.

@function getMap($map, $keys...) {
  @if $map {
    @if $keys {
      @each $key in $keys {
        @if type-of($keys) == arglist {
          $map: map-get($map, $key);
        } @else {
          @warn string.unquote('Invalid $key property type provided. Expected "arglist" but recieved:') #{type-of($key)};
        }
      }
    } @else {
      @warn string.unquote('Invalid "$keys" provided in contains function:') #{$keys};
    }
  } @else {
    @warn string.unquote('Invalid "$map" provided in contains function:') #{$map};
  }

  @return $map;
}

//⚔️⚰️⚰️⚰️⚰️⚰️⚰️⚰️⚔️
// WARNING: MAP DEEP SET IS NOT TESTED AT ALL
//⚔️⚰️⚰️⚰️⚰️⚰️⚰️⚰️⚔️

// Map Deep set
/// Deep set function to set a value in nested maps
/// @author Kitty Giraudel
/// @access public
/// @param {Map} $map - Map
/// @param {List} $keys -  Key chaine
/// @param {*} $value - Value to assign
/// @return {Map}
//

// Similar to get set function sets a value to a map
@function set($map, $keys, $value) {
  $maps: ($map);
  $result: null;

  // If the last key is a map already
  // Warn the user we will be overriding it with $value
  @if type-of(nth($keys, -1)) == 'map' {
    @warn "The last key you specified is a map; it will be overrided with `#{$value}`.";
  }

  // If $keys is a single key
  // Just merge and return
  @if length($keys) == 1 {
    @return map-merge(
      $map,
      (
        $keys: $value,
      )
    );
  }

  // Loop from the first to the second to last key from $keys
  // Store the associated map to this key in the $maps list
  // If the key doesn't exist, throw an error
  @for $i from 1 through length($keys) - 1 {
    $current-key: nth($keys, $i);
    $current-map: nth($maps, -1);
    $current-get: map-get($current-map, $current-key);
    @if $current-get == null {
      @error "Key `#{$key}` doesn't exist at current level in map.";
    }
    $maps: append($maps, $current-get);
  }

  // Loop from the last map to the first one
  // Merge it with the previous one
  @for $i from length($maps) through 1 {
    $current-map: nth($maps, $i);
    $current-key: nth($keys, $i);
    $current-val: if($i == length($maps), $value, $result);
    $result: map-merge(
      $current-map,
      (
        $current-key: $current-val,
      )
    );
  }

  // Return result
  @return $result;
}

// Contains function returns true or false. Checks if a value is present in a list inside sinConfig
@function contains($list, $var) {
  $isTrue: null;
  @each $key, $value in get($list) {
    @if $key == $var {
      $isTrue: true;
    }
  }

  @if $isTrue != true {
    @warn string.unquote('Invalid $var provided in contains function:') #{$var};
  }

  @return $isTrue;
}

// Function to easily get colors
@function color($key: null) {
  // Check if input is null.
  @if (type-of($key) == 'null') {
    @debug 'Color function received no input.';
    @debug 'Available colors: ';
    @each $colorId, $color in get(colors) {
      @debug ' #{$colorId}: #{$color}';
    }
    @return '---';
  } @else {
    // Check if $key is part of the colors map
    @if not map.has-key(get(colors), $key) {
      @warn 'Color function needs a valid input. It requires a color key from sinConfig. The current value is: `#{$key}`. See bellow for available colors';
      @debug 'Available colors: ';
      @each $colorId, $color in get(colors) {
        @debug ' #{$colorId}: #{$color}';
      }

      @return '---';
    } @else {
      // Value exists so return value
      @return get(colors, $key);
    }
  }
}

// Spacing Function
@function spacing($value: 0, $scale: 1) {
  @if map.has-key(get(spacing), $value) and type-of($scale) == 'number' {
    // If the $value is 0, instead of error return the default, but send a warning during compilation.
    @if $value == 0 {
      @warn 'Spacing function used, with a 0 as an input. This will return a spacing value of #{$value}';
    }
    @return calc(#{get(spacing, $value)} * #{$scale});
  } @else {
    @warn 'Either $value does not exist in sinConfig, or scale is not a number. See bellow for more.';
    @debug 'Your input: $value: #{$value}, $scale: #{$scale}';
    @debug 'Available spacings $values';
    @each $spacingId, $spacing in get(spacing) {
      @debug ' #{$spacingId}: #{$spacing}';
    }
    @error 'Spacing function error.';
  }
}
