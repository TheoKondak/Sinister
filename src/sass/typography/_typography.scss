@use 'sass:map';
@use '../../configuration' as *;
@use '../utility';
@use '../modules/func';

//+----------------------+
// Importing Fonts
//+----------------------+

// You can load/import fonts to use easily with font face.

// Example:
@font-face {
  // font-family: Roboto Condensed Regular;
  // src: url(../../../../images/fonts/RobotoCondensedRegular.ttf) format("ttf"), // Format is optional
  // url(https://fonts.googleapis.com/css2?family=Roboto:wght@100&display=swap); // Load multiple sources, local or frin url (slower)
}

$font-families: get(font-family);
// Itterate through font families map
@each $font-family in $font-families {
  // @debug getMap($font-family, font-name);
  @font-face {
    // Use deep get function from func
    font-family: getMap($font-family, font-name);

    // Itterate throught the array of URLs, for fallback urls.

    @for $i from 1 through length(get($font-family)) {
      // For every font-family decladed in _configuration.scss

      $length: length(getMap($font-family, url)); // lenth of url array

      @if $length == 0 {
        @warn '@font-face url contains no data, or invalid data. Edit in _configuration.scss';
      } @else if $length == 1 {
        src: url(nth(getMap($font-family, url), 1)) format(getMap($font-family, format)); // Format is optional
      } @else if $length == 2 {
        src: url(nth(getMap($font-family, url), 1)) format(getMap($font-family, format)),
          // Format is optional
          url(nth(getMap($font-family, url), 2))
            format(getMap($font-family, format)); // Format is optional
      } @else {
        @warn '@font-face url setting in _configuration.scss requires a url, and optionally a fallback url';
      }
    }
  }
}

@mixin fontName {
  font-family: Roboto Conndensed Regular, Arial, sans-serif; // Dont forget to add some fallback fonts
}

@mixin capitalize {
  text-transform: capitalize;
}
.capitalize {
  @include capitalize;
}

@mixin uppercase {
  text-transform: uppercase;
}
.uppercase {
  @include uppercase;
}

@mixin txtXs($scale: 1) {
  font-size: calc(#{map-get($fontSizes, xs)} * #{$scale});
}
.txtXs {
  @include txtXs;
}

@mixin txtSm($scale: 1) {
  font-size: calc(#{map-get($fontSizes, sm)} * #{$scale});
}
.txtSm {
  @include txtSm;
}

@mixin txtMd($scale: 1) {
  font-size: calc(#{map-get($fontSizes, md)} * #{$scale});
}
.txtMd {
  @include txtMd;
}

@mixin txtXl($scale: 1) {
  font-size: calc(#{map-get($fontSizes, xl)} * #{$scale});
}
.txtXl {
  @include txtXl;
}

@mixin txtXxl($scale: 1) {
  font-size: calc(#{map-get($fontSizes, xxl)} * #{$scale});
}
.txtXxl {
  @include txtXxl;
}

//+----------------------+
// Responsive Font Sizes
//+----------------------+
@if $responsiveFontSizes {
  :root {
    font-size: map-get($fontSizes, generic);

    @media (max-width: map-get($breakpoints, xxl)) {
      font-size: map-get($fontSizes, xxl);
    }

    @media (max-width: map-get($breakpoints, xl)) {
      font-size: map-get($fontSizes, xl);
    }

    @media (max-width: map-get($breakpoints, md)) {
      font-size: map-get($fontSizes, md);
    }

    @media (max-width: map-get($breakpoints, sm)) {
      font-size: map-get($fontSizes, sm);
    }

    @media (max-width: map-get($breakpoints, xs)) {
      font-size: map-get($fontSizes, sm);
    }
  }
}

body {
  line-height: 1.61803398875; //Golden Ratio

  h1 {
    font-size: map-get($fontSizes, h1);
  }

  h2 {
    font-size: map-get($fontSizes, h2);
  }

  h3 {
    font-size: map-get($fontSizes, h3);
  }

  h4 {
    font-size: map-get($fontSizes, h4);
  }

  h5 {
    font-size: map-get($fontSizes, h5);
  }

  h6 {
    font-size: map-get($fontSizes, h6);
  }

  span {
    font-size: map-get($fontSizes, span);
  }

  p {
    font-size: map-get($fontSizes, p);
  }

  a {
    text-decoration: none;

    font-size: map-get($fontSizes, a);

    &:hover {
      text-decoration: none;
    }
  }

  button {
    text-decoration: none;
    font-size: map-get($fontSizes, button);
    &:hover {
      text-decoration: none;
    }
  }

  em {
    font-size: map-get($fontSizes, em);
  }

  small {
    font-size: map-get($fontSizes, small);
  }

  strong {
    font-size: map-get($fontSizes, strong);
  }

  ul {
    font-size: map-get($fontSizes, ul);
  }

  ol {
    font-size: map-get($fontSizes, ol);
  }

  li {
    @if $disListStyle {
      @include liNoDec;
    }

    font-size: map-get($fontSizes, xxl);
  }

  hr {
    font-size: map-get($fontSizes, hr);
  }

  br {
    font-size: map-get($fontSizes, br);
  }

  wbr {
    font-size: map-get($fontSizes, wbr);
  }

  div {
    font-size: map-get($fontSizes, div);
  }

  section {
    font-size: map-get($fontSizes, section);
  }
}
